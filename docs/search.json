[
  {
    "objectID": "minimal_analysis.html",
    "href": "minimal_analysis.html",
    "title": "Flujo de análisis mínimo para un término HPO",
    "section": "",
    "text": "Este es un ejemplo mínimo del análisis de un término HPO utilizando técnicas de biología de sistemas para comprender mejor los mecanismos subyacentes, incluyendo los pasos más importantes en el flujo de trabajo del análisis. Comenzamos con un término HPO, “morfología anormal del corpúsculo renal”, y sugerimos procesos subyacentes importantes, como el sistema inmunológico y las vías del complemento; la mitocondria, la respiración aeróbica y la producción de ATP. Sin embargo, existen muchas formas en que se puede ampliar el análisis. Puedes cambiar el umbral de puntuación utilizado para obtener interacciones de STRINGdb, agregar genes adicionales basados en interacciones con genes asociados a fenotipos conocidos, investigar otros métodos de agrupación, explorar otras bases de datos y fuentes de anotación para el análisis de enriquecimiento, o considerar herramientas adicionales de visualización, otras metricas, etc."
  },
  {
    "objectID": "minimal_analysis.html#descarga-manual",
    "href": "minimal_analysis.html#descarga-manual",
    "title": "Flujo de análisis mínimo para un término HPO",
    "section": "Descarga Manual",
    "text": "Descarga Manual\n\nNavega al sitio web de la Ontología de Fenotipos Humanos (HPO).\nBusca abnormal renal corpuscle morphology en la barra de búsqueda.\nHaz clic en el fenotipo para ver los detalles.\nLocaliza la lista de genes asociados y descárgala en formato de texto (Export Associations).\n\nANOTA el codigo HPO del fenotipo, nos va a hacer falta para el siguiente paso:"
  },
  {
    "objectID": "minimal_analysis.html#uso-de-la-api",
    "href": "minimal_analysis.html#uso-de-la-api",
    "title": "Flujo de análisis mínimo para un término HPO",
    "section": "Uso de la API",
    "text": "Uso de la API\n\n¿Qué es una API?\nUna Interfaz de Programación de Aplicaciones (API) permite que diferentes aplicaciones de software se comuniquen entre sí. En nuestro caso, nos permite acceder programáticamente a datos de la HPO. Puedes usar una API para obtener automáticamente la lista de genes sin tener que descargarla manualmente. PUEDES USAR OTRAS LENGUAJES DE PROGAMACION SI PREFERIS\nPara usar la API, aquí hay un ejemplo de cómo obtener genes programáticamente. Primero, necesitamos instalar y cargar las bibliotecas necesarias:\n\n# Install necessary packages if not already installed\nif (!requireNamespace(\"httr\", quietly = TRUE)) {\n  install.packages(\"httr\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\n\nlibrary(httr)\nlibrary(jsonlite)\n\n# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology\nhpo_id &lt;- \"HP:0031263\"  # HPO ID for abnormal renal corpuscle morphology\n\nurl &lt;- paste0(\"https://ontology.jax.org/api/network/annotation/\", hpo_id)\n\nresponse &lt;- GET(url)\ndata &lt;- content(response, as = \"text\", encoding = \"UTF-8\")\ngenes &lt;- fromJSON(data)$genes\n\n# Display the first few genes\nhead(genes)\n\n              id  name\n1  NCBIGene:2335   FN1\n2  NCBIGene:4311   MME\n3  NCBIGene:7369  UMOD\n4 NCBIGene:55644 OSGEP\n5 NCBIGene:11277 TREX1\n6 NCBIGene:57728 WDR19\n\n# Display all the genes (uncomment)\n# print(genes)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Aqui encuentrarás la material para la sección de James R. Perkins en Biología de Sistemas, Grado en Ingeniería de la Salud, Universidad de Málaga"
  },
  {
    "objectID": "analisis_topo_1.html",
    "href": "analisis_topo_1.html",
    "title": "Exercicio",
    "section": "",
    "text": "La modularidad es una medida de la estructura de una red que evalúa la fortaleza de la división de la red en módulos o comunidades. Un módulo es un conjunto de nodos que están más densamente conectados entre sí en comparación con otros nodos de la red. La modularidad es útil para identificar comunidades o agrupamientos dentro de la red.\nLa modularidad se calcula comparando la densidad de conexiones dentro de los módulos con la que se esperaría en una red aleatoria con la misma distribución de grados.\n\n\nLa modularidad, ( Q ), de una partición en módulos se calcula usando la siguiente ecuación:\n\\[\nQ = \\frac{1}{2m} \\sum_{i,j} \\left( A_{ij} - \\frac{k_i k_j}{2m} \\right) \\delta(c_i, c_j)\n\\]\ndonde: - \\(m\\) es el número total de aristas en la red. - \\(A_{ij}\\) es el valor en la posición \\((i, j)\\) de la matriz de adyacencia, donde \\(A_{ij} = 1\\) si hay una arista entre los nodos \\(i\\) y \\(j\\), y \\(0\\) en caso contrario. - \\(k_i\\) y \\(k_j\\) son los grados de los nodos \\(i\\) y \\(j\\), respectivamente. - \\(\\delta(c_i, c_j)\\) es la función delta de Kronecker, que es 1 si \\(c_i = c_j\\) (es decir, los nodos \\(i\\) y \\(j\\) están en el mismo módulo) y 0 en caso contrario.\nLa modularidad \\(Q\\) varía entre -1 y 1, donde valores cercanos a 1 indican una alta modularidad, es decir, una red con comunidades bien definidas. Valores cercanos a 0 o negativos indican una estructura comunitaria poco definida o inexistente.\nAquí tienes la sección revisada con dos ejemplos utilizando sample_islands, que ilustran redes con modularidad alta y baja. Esta función crea redes con distintas “islas” o comunidades y nos permite ajustar el número de nodos y el nivel de conectividad entre comunidades para observar el efecto en la modularidad."
  },
  {
    "objectID": "analisis_topo_1.html#modularity-en-redes",
    "href": "analisis_topo_1.html#modularity-en-redes",
    "title": "Exercicio",
    "section": "",
    "text": "La modularidad es una medida de la estructura de una red que evalúa la fortaleza de la división de la red en módulos o comunidades. Un módulo es un conjunto de nodos que están más densamente conectados entre sí en comparación con otros nodos de la red. La modularidad es útil para identificar comunidades o agrupamientos dentro de la red.\nLa modularidad se calcula comparando la densidad de conexiones dentro de los módulos con la que se esperaría en una red aleatoria con la misma distribución de grados.\n\n\nLa modularidad, ( Q ), de una partición en módulos se calcula usando la siguiente ecuación:\n\\[\nQ = \\frac{1}{2m} \\sum_{i,j} \\left( A_{ij} - \\frac{k_i k_j}{2m} \\right) \\delta(c_i, c_j)\n\\]\ndonde: - \\(m\\) es el número total de aristas en la red. - \\(A_{ij}\\) es el valor en la posición \\((i, j)\\) de la matriz de adyacencia, donde \\(A_{ij} = 1\\) si hay una arista entre los nodos \\(i\\) y \\(j\\), y \\(0\\) en caso contrario. - \\(k_i\\) y \\(k_j\\) son los grados de los nodos \\(i\\) y \\(j\\), respectivamente. - \\(\\delta(c_i, c_j)\\) es la función delta de Kronecker, que es 1 si \\(c_i = c_j\\) (es decir, los nodos \\(i\\) y \\(j\\) están en el mismo módulo) y 0 en caso contrario.\nLa modularidad \\(Q\\) varía entre -1 y 1, donde valores cercanos a 1 indican una alta modularidad, es decir, una red con comunidades bien definidas. Valores cercanos a 0 o negativos indican una estructura comunitaria poco definida o inexistente.\nAquí tienes la sección revisada con dos ejemplos utilizando sample_islands, que ilustran redes con modularidad alta y baja. Esta función crea redes con distintas “islas” o comunidades y nos permite ajustar el número de nodos y el nivel de conectividad entre comunidades para observar el efecto en la modularidad."
  },
  {
    "objectID": "analisis_topo_1.html#modularidad-en-redes-y-su-cálculo-en-igraph",
    "href": "analisis_topo_1.html#modularidad-en-redes-y-su-cálculo-en-igraph",
    "title": "Exercicio",
    "section": "Modularidad en Redes y su Cálculo en igraph",
    "text": "Modularidad en Redes y su Cálculo en igraph\nLa modularidad en redes se refiere a la tendencia de los nodos a agruparse en comunidades o módulos. Este concepto es fundamental en el análisis de redes complejas, ya que una modularidad alta indica que la red tiene comunidades bien definidas, donde las conexiones dentro de cada comunidad son densas y las conexiones entre comunidades son escasas. En biología, esta estructura modular es común en redes como las de interacción proteica y rutas metabólicas.\n\nEcuación de la Modularidad\nLa modularidad de una partición de la red en comunidades se calcula mediante la fórmula:\n[ Q = _{i,j} (c_i, c_j) ]\ndonde: - ( A_{ij} ) es la matriz de adyacencia de la red (1 si hay una conexión entre (i) y (j), 0 en caso contrario), - ( k_i ) y ( k_j ) son los grados de los nodos (i) y (j), - ( m ) es el número total de enlaces en la red, - ( (c_i, c_j) ) es una función que es 1 si los nodos (i) y (j) están en la misma comunidad y 0 en caso contrario.\nEsta ecuación permite calcular un valor de modularidad ( Q ) para evaluar qué tan bien definida está la estructura modular de una red.\n\n\nEjemplos de Redes con Alta y Baja Modularidad usando sample_islands\n\nEjemplo 1: Red con Alta Modularidad\nEn este ejemplo, crearemos una red con varias comunidades bien definidas, donde los nodos dentro de cada comunidad están fuertemente conectados entre sí, pero las conexiones entre comunidades son escasas. Esto genera una alta modularidad.\n\n# Cargar el paquete igraph\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n# Crear una red con alta modularidad usando sample_islands\nset.seed(3)\ng_high_modularity &lt;- sample_islands(islands.n=4, islands.size=10, islands.pin=0.8, n.inter=3)\n\n# Detectar comunidades usando el algoritmo de Louvain\ncommunity_high &lt;- cluster_louvain(g_high_modularity)\n\n# Calcular la modularidad\nmodularity_high &lt;- modularity(community_high)\ncat(\"Modularidad de la red con alta modularidad:\", modularity_high, \"\\n\")\n\nModularidad de la red con alta modularidad: 0.6414937 \n\n# Visualizar la red y las comunidades\nV(g_high_modularity)$color &lt;- membership(community_high)\nplot(g_high_modularity, vertex.color = V(g_high_modularity)$color, main = \"Red con Alta Modularidad\")\n\n\n\n\n\n\n\n\nEn este caso, la modularidad es alta, lo cual indica que la red presenta comunidades bien definidas, con muchos enlaces dentro de cada comunidad y pocos entre ellas. Este tipo de estructura es común en redes biológicas robustas, como las de interacción proteica en células especializadas.\n\n\nEjemplo 2: Red con Baja Modularidad\nA continuación, crearemos una red con menor modularidad, utilizando sample_islands con menos comunidades y mayor conectividad entre ellas. Esto reduce la modularidad, pues los nodos están más distribuidos y menos agrupados en módulos.\n\n# Crear una red con baja modularidad usando sample_islands\nset.seed(4)\ng_low_modularity &lt;- sample_islands(islands.n=4, islands.size=10, islands.pin=0.3, n.inter=5)\n\n# Detectar comunidades usando el algoritmo de Louvain\ncommunity_low &lt;- cluster_louvain(g_low_modularity)\n\n# Calcular la modularidad\nmodularity_low &lt;- modularity(community_low)\ncat(\"Modularidad de la red con baja modularidad:\", modularity_low, \"\\n\")\n\nModularidad de la red con baja modularidad: 0.4427343 \n\n# Visualizar la red y las comunidades\nV(g_low_modularity)$color &lt;- membership(community_low)\nplot(g_low_modularity, vertex.color = V(g_low_modularity)$color, main = \"Red con Baja Modularidad\")\n\n\n\n\n\n\n\n\nEn esta red, la modularidad es más baja debido a la mayor conectividad entre las comunidades, lo cual dificulta identificar módulos bien definidos. Redes de este tipo pueden aparecer en sistemas biológicos menos especializados o en procesos donde existe una integración funcional alta entre diferentes módulos, como en algunas redes metabólicas.\n\n\n\nInterpretación en Biología\nLa modularidad alta en redes biológicas es indicativa de una especialización funcional, donde cada módulo o comunidad realiza una función específica. Por otro lado, redes con baja modularidad pueden sugerir funciones integradas y sistemas menos especializados. En biología de sistemas, analizar la modularidad ayuda a descubrir módulos funcionales y a entender la organización jerárquica de los sistemas biológicos.\n\n\nDescripción del Código\n\nDetección de Comunidades: Utilizamos cluster_louvain para detectar comunidades en la red. Este algoritmo es eficiente para maximizar la modularidad y encontrar módulos bien definidos.\nCálculo de Modularidad: Con modularity(community), calculamos la modularidad de la partición de la red en comunidades. Esto nos da una medida de la calidad de la estructura de la red en términos de módulos.\nVisualización de Comunidades: Coloreamos los nodos de acuerdo con la comunidad a la que pertenecen usando membership(community) para facilitar la visualización de las divisiones de la red.\n\n\n\n\nInterpretación de Modularidad\nUn valor alto de modularidad sugiere que la red tiene una estructura de comunidad fuerte, con nodos más densamente conectados dentro de los módulos y menos conectados con nodos de otros módulos. La modularidad es especialmente útil en biología para identificar grupos funcionales de proteínas en redes de interacción o redes de coexpresión genética, donde los módulos pueden representar rutas o complejos funcionales."
  },
  {
    "objectID": "analisis_topo_1.html#modularidad-en-redes-biológicas-y-su-aplicación-en-biología-de-sistemas",
    "href": "analisis_topo_1.html#modularidad-en-redes-biológicas-y-su-aplicación-en-biología-de-sistemas",
    "title": "Exercicio",
    "section": "Modularidad en Redes Biológicas y su Aplicación en Biología de Sistemas",
    "text": "Modularidad en Redes Biológicas y su Aplicación en Biología de Sistemas\nEn biología, la modularidad es fundamental para analizar la organización de redes complejas, como redes de interacción proteica, redes de regulación genética y redes metabólicas. En estas redes, la modularidad ayuda a identificar complejos de proteínas, rutas metabólicas, y módulos funcionales que son esenciales para procesos celulares específicos. Estos módulos reflejan funciones biológicas que están integradas y muchas veces aisladas en cuanto a su función dentro de la célula, haciendo de la modularidad una herramienta poderosa para descubrir nuevas relaciones biológicas y entender la robustez de los sistemas.\n\nEjemplo 1: Red de Interacción Proteica\nEn una red de interacción proteica, los nodos representan proteínas y las aristas representan interacciones físicas entre ellas. Las proteínas suelen agruparse en complejos que funcionan conjuntamente en procesos celulares específicos. Al analizar la modularidad de esta red, se pueden identificar módulos que representan estos complejos proteicos.\nCódigo en igraph para analizar una red de interacción proteica simulada:\n\n# Crear una red simulada con estructura modular, representando interacción proteica\nset.seed(1)\ng_protein &lt;- sample_pa(50, m = 3, directed = FALSE)\n\n# Detectar comunidades en la red de interacción proteica usando el algoritmo de Louvain\ncommunity_protein &lt;- cluster_louvain(g_protein)\n\n# Calcular la modularidad de la partición\nmodularity_protein &lt;- modularity(community_protein)\ncat(\"Modularidad de la red de interacción proteica:\", modularity_protein, \"\\n\")\n\nModularidad de la red de interacción proteica: 0.3002508 \n\n# Visualizar la red y las comunidades\nV(g_protein)$color &lt;- membership(community_protein)\nplot(g_protein, vertex.color = V(g_protein)$color, main = \"Red de Interacción Proteica con Comunidades\")\n\n\n\n\n\n\n\n\nEn este ejemplo, cada módulo (comunidad) detectado podría corresponder a un complejo proteico. La modularidad cuantifica la efectividad de esta división y sugiere una estructura comunitaria bien definida si el valor es alto, lo cual es común en redes biológicas debido a la especialización de funciones.\n\n\nEjemplo 2: Red Metabólica\nEn una red metabólica, los nodos representan metabolitos y las aristas representan reacciones bioquímicas que convierten un metabolito en otro. La modularidad en este contexto puede ayudar a identificar rutas metabólicas o subconjuntos de metabolitos y reacciones que forman un proceso metabólico completo, como la glucólisis o el ciclo del ácido cítrico.\nCódigo en igraph para analizar una red metabólica simulada:\n\n# Crear una red metabólica simulada con estructura modular\nset.seed(2)\ng_metabolic &lt;- sample_smallworld(1, 50, 4, 0.05)\n\n# Detectar comunidades en la red metabólica usando el algoritmo de Louvain\ncommunity_metabolic &lt;- cluster_louvain(g_metabolic)\n\n# Calcular la modularidad de la partición\nmodularity_metabolic &lt;- modularity(community_metabolic)\ncat(\"Modularidad de la red metabólica:\", modularity_metabolic, \"\\n\")\n\nModularidad de la red metabólica: 0.518775 \n\n# Visualizar la red y las comunidades\nV(g_metabolic)$color &lt;- membership(community_metabolic)\nplot(g_metabolic, vertex.color = V(g_metabolic)$color, main = \"Red Metabólica con Comunidades\")\n\n\n\n\n\n\n\n\nEn este ejemplo, las comunidades o módulos identificados por la modularidad pueden representar rutas metabólicas en las cuales los metabolitos y reacciones están funcionalmente conectados. Esto permite el análisis de las interacciones metabólicas y cómo se organizan en la red celular.\n\n\nInterpretación en Biología de Sistemas\nLa modularidad es particularmente relevante en biología de sistemas para modelar la organización funcional de las redes biológicas y su robustez. Las redes altamente modulares tienden a ser más robustas frente a perturbaciones, ya que los módulos actúan de manera relativamente independiente. Por ejemplo: - En redes de interacción genética, los módulos pueden representar genes que participan en rutas reguladoras específicas. - En redes de señalización celular, la modularidad permite identificar cascadas de señalización, lo que ayuda a comprender cómo las células responden a estímulos externos de manera organizada.\nLa modularidad, al permitir identificar estas estructuras funcionales dentro de la red, ayuda a los investigadores a proponer nuevas hipótesis sobre el funcionamiento de los sistemas biológicos y la evolución de su organización."
  }
]