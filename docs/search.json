[
  {
    "objectID": "minimal_analysis.html",
    "href": "minimal_analysis.html",
    "title": "Flujo de análisis mínimo para un término HPO",
    "section": "",
    "text": "Este es un ejemplo mínimo del análisis de un término HPO utilizando técnicas de biología de sistemas para comprender mejor los mecanismos subyacentes, incluyendo los pasos más importantes en el flujo de trabajo del análisis. Comenzamos con un término HPO, “morfología anormal del corpúsculo renal”, y sugerimos procesos subyacentes importantes, como el sistema inmunológico y las vías del complemento; la mitocondria, la respiración aeróbica y la producción de ATP. Sin embargo, existen muchas formas en que se puede ampliar el análisis. Puedes cambiar el umbral de puntuación utilizado para obtener interacciones de STRINGdb, agregar genes adicionales basados en interacciones con genes asociados a fenotipos conocidos, investigar otros métodos de agrupación, explorar otras bases de datos y fuentes de anotación para el análisis de enriquecimiento, o considerar herramientas adicionales de visualización, otras metricas, etc."
  },
  {
    "objectID": "minimal_analysis.html#descarga-manual",
    "href": "minimal_analysis.html#descarga-manual",
    "title": "Flujo de análisis mínimo para un término HPO",
    "section": "Descarga Manual",
    "text": "Descarga Manual\n\nNavega al sitio web de la Ontología de Fenotipos Humanos (HPO).\nBusca abnormal renal corpuscle morphology en la barra de búsqueda.\nHaz clic en el fenotipo para ver los detalles.\nLocaliza la lista de genes asociados y descárgala en formato de texto (Export Associations).\n\nANOTA el codigo HPO del fenotipo, nos va a hacer falta para el siguiente paso:"
  },
  {
    "objectID": "minimal_analysis.html#uso-de-la-api",
    "href": "minimal_analysis.html#uso-de-la-api",
    "title": "Flujo de análisis mínimo para un término HPO",
    "section": "Uso de la API",
    "text": "Uso de la API\n\n¿Qué es una API?\nUna Interfaz de Programación de Aplicaciones (API) permite que diferentes aplicaciones de software se comuniquen entre sí. En nuestro caso, nos permite acceder programáticamente a datos de la HPO. Puedes usar una API para obtener automáticamente la lista de genes sin tener que descargarla manualmente. PUEDES USAR OTRAS LENGUAJES DE PROGAMACION SI PREFERIS\nPara usar la API, aquí hay un ejemplo de cómo obtener genes programáticamente. Primero, necesitamos instalar y cargar las bibliotecas necesarias:\n\n# Install necessary packages if not already installed\nif (!requireNamespace(\"httr\", quietly = TRUE)) {\n  install.packages(\"httr\")\n}\nif (!requireNamespace(\"jsonlite\", quietly = TRUE)) {\n  install.packages(\"jsonlite\")\n}\n\nlibrary(httr)\nlibrary(jsonlite)\n\n# API request to get genes associated with the HPO term for abnormal renal corpuscle morphology\nhpo_id &lt;- \"HP:0031263\"  # HPO ID for abnormal renal corpuscle morphology\n\nurl &lt;- paste0(\"https://ontology.jax.org/api/network/annotation/\", hpo_id)\n\nresponse &lt;- GET(url)\ndata &lt;- content(response, as = \"text\", encoding = \"UTF-8\")\ngenes &lt;- fromJSON(data)$genes\n\n# Display the first few genes\nhead(genes)\n\n               id    name\n1    NCBIGene:396 ARHGDIA\n2   NCBIGene:1286  COL4A4\n3   NCBIGene:1285  COL4A3\n4  NCBIGene:57728   WDR19\n5   NCBIGene:3075     CFH\n6 NCBIGene:254428 SLC41A1\n\n# Display all the genes (uncomment)\n# print(genes)"
  },
  {
    "objectID": "clustering.html",
    "href": "clustering.html",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "",
    "text": "El análisis de redes es una herramienta fundamental en biología de sistemas, ya que permite modelar y analizar interacciones biológicas complejas, como las redes de interacción proteína-proteína (PPI, por sus siglas en inglés), redes metabólicas, redes de regulación génica y redes de co-expresión génica. Dentro de estas redes, los módulos o comunidades representan grupos de nodos altamente interconectados que frecuentemente comparten funciones biológicas comunes o están involucrados en procesos similares.\nPor ejemplo:\n\nEn redes metabólicas, los módulos pueden corresponder a rutas metabólicas específicas.\n\n\n\n\npublic.ornl.gov\n\n\n\nEn redes de co-expresión génica, se han identificado clústeres de genes que co-regulan procesos biológicos importantes, como el ciclo celular o la respuesta al estrés.\n\n\n\n\nrna-seqblog.com\n\n\n\nEn redes PPI, los módulos pueden representar complejos proteicos funcionales o vías de señalización crítica.\n\n\n\n\nLabusek et al., 2023\n\n\nDada la naturaleza jerárquica y modular de los sistemas biológicos, los métodos de clustering en redes permiten no solo identificar estas unidades funcionales, sino también generar hipótesis sobre la organización y evolución de los sistemas biológicos.\n\n\n\n\nLa modularidad es un principio clave en biología de sistemas, pues permite que los componentes de una red biológica interactúen de manera eficiente en subunidades funcionales. Estas subunidades (o módulos) están involucradas en procesos específicos, como la síntesis de proteínas, las rutas metabólicas y la señalización celular.\n\nEn rutas metabólicas:\n\nLos módulos en redes metabólicas representan rutas bioquímicas específicas, donde cada módulo agrupa metabolitos y enzimas que trabajan de manera coordinada.\n\nEjemplo: Estudios han utilizado análisis de modularidad para optimizar la ingeniería metabólica en bacterias como E. coli, dividiendo su red metabólica en módulos para maximizar la producción de biocombustibles (Nielsen & Keasling, 2016).\n\nEn redes de interacción proteína-proteína (PPI):\n\nLas redes PPI son altamente modulares, con módulos que representan complejos proteicos funcionales o grupos de proteínas involucradas en procesos biológicos comunes.\n\nEjemplo: En un análisis de redes de proteínas relacionadas con el cáncer, se identificaron módulos asociados a procesos específicos como la apoptosis y la reparación del ADN. Este enfoque permite priorizar biomarcadores terapéuticos dentro de módulos funcionales.\n\nAdemás, la identificación de módulos en redes virales (como las interacciones entre proteínas del SARS-CoV-2 y del huésped humano) ha revelado objetivos terapéuticos potenciales (Gordon et al., 2020).\n\nEn redes de regulación génica:\n\nLos módulos en redes génicas reflejan conjuntos de genes co-regulados que participan en procesos celulares específicos.\n\nEjemplo: El uso de herramientas como ATAC-seq para analizar redes reguladoras ha permitido identificar módulos específicos activados durante la diferenciación celular (Buenrostro et al., 2018).\n\n\n\n\n\nLa jerarquía en la organización celular es un principio fundamental en la biología que refleja cómo los sistemas biológicos están estructurados en niveles organizativos, desde moléculas hasta células, tejidos, órganos y organismos. Este concepto es crucial para entender redes biológicas y para desarrollar métodos efectivos de clustering, ya que estas redes suelen mostrar propiedades jerárquicas y modulares que reflejan esta organización.\n\n\n\nDefinición: La jerarquía en la biología describe cómo las entidades en un nivel más bajo de organización (p. ej., moléculas) se ensamblan para formar estructuras más complejas (p. ej., organelos, células).\nRelación con redes biológicas: Las redes biológicas, como las de interacción proteína-proteína (PPI, Protein-Protein Interaction), regulan esta organización jerárquica al conectar moléculas que trabajan juntas para realizar funciones específicas.\n\n\n\n\n\nRedes de Interacción Proteína-Proteína (PPI):\n\nLas proteínas que forman parte de un complejo proteico específico suelen estar más conectadas entre sí que con otras proteínas en la red. Por ejemplo, las proteínas ribosomales interactúan predominantemente dentro del ribosoma, formando un módulo altamente cohesivo.\nA nivel jerárquico, los módulos del ribosoma pueden estar conectados con otros módulos relacionados con la síntesis de proteínas.\n\nRedes Metabólicas:\n\nLos metabolitos dentro de una vía metabólica específica (p. ej., glucólisis) están más interconectados entre sí que con metabolitos en otras vías.\nA mayor escala, estas vías metabólicas se agrupan en categorías funcionales más amplias, como el metabolismo energético.\n\nRedes de Señalización:\n\nLas moléculas señalizadoras (como kinases y fosfatasas) tienden a formar módulos relacionados con procesos específicos (p. ej., reparación del ADN o respuesta inmune).\nEstos módulos pueden interactuar en un nivel superior, integrando señales entre distintas rutas de señalización.\n\n\n\n\n\n\nLos algoritmos de clustering jerárquicos (como Edge Betweenness y Fast Greedy) reflejan directamente esta organización jerárquica, ya que identifican subconjuntos dentro de la red a diferentes niveles de resolución.\nPor ejemplo, se pueden identificar módulos más pequeños que representan complejos proteicos individuales y módulos más grandes que conectan complejos relacionados funcionalmente.\n\nDiferenciación entre Escalas: - La jerarquía permite estudiar redes biológicas en múltiples escalas, desde interacciones moleculares específicas hasta sistemas multicelulares completos.\n\nRedes de regulación genética:\n\nLos genes regulados por un mismo factor de transcripción forman módulos cohesivos. A su vez, estos factores se agrupan en niveles superiores de regulación, reflejando una jerarquía en el control de la expresión génica.\n\n\n\n\n\n\n\nEficiencia en la maquinaria celular:\n\nLos módulos permiten realizar tareas específicas de manera eficiente y sin interferencias.\n\nRobustez frente a fallos:\n\nLa jerarquía y modularidad permiten que la red siga funcionando incluso si ciertos nodos fallan.\n\nAdaptabilidad evolutiva:\n\nLos módulos pueden evolucionar independientemente, permitiendo la especialización.\n\n\nEl clustering de redes ha sido utilizado para:\n\nFunción génica y predicción de enfermedades: Los genes asociados a un mismo módulo suelen estar implicados en funciones similares, lo que facilita la anotación funcional de genes no caracterizados.\nDescubrimiento de biomarcadores: En estudios de transcriptómica y proteómica, los módulos identificados pueden revelar biomarcadores asociados a enfermedades o estados fisiológicos específicos .\nModelado de la robustez y vulnerabilidad del sistema: La estructura modular ayuda a entender cómo los sistemas biológicos mantienen su funcionalidad frente a perturbaciones, ya sea mediante redundancia o interacción entre módulos.\nEvolución de las redes biológicas: El análisis de los módulos permite estudiar cómo han evolucionado las interacciones entre genes y proteínas en diferentes especies.\n\n\n\n\n\nA lo largo de este tutorial, se abordarán cinco métodos principales de clustering, cada uno con características únicas:\n\nEdge Betweenness (Intermediación de Aristas):\n\nIdentifica comunidades al eliminar iterativamente las aristas con mayor intermediación.\n\nEs particularmente útil para redes pequeñas y permite una visualización clara del proceso de partición. Sin embargo, su complejidad lo hace ineficiente para redes grandes.\n\nWalktrap (Caminatas Aleatorias):\n\nUtiliza caminatas aleatorias para detectar comunidades, basándose en la idea de que nodos dentro de una misma comunidad están más “cercanos” en términos probabilísticos.\n\nIdeal para redes medianas con módulos densos y conexos.\n\nFast Greedy (Greedy Maximization of Modularity):\n\nUn método jerárquico que agrupa nodos de manera iterativa para maximizar la modularidad global.\n\nEs eficiente y adecuado para redes grandes, aunque su resolución puede ser limitada en algunos casos.\n\nInfomap:\n\nSe basa en la teoría de la codificación de información para dividir la red en módulos, minimizando la descripción de un caminante aleatorio.\n\nEs particularmente efectivo en redes con muchas comunidades pequeñas.\n\nLabel Propagation:\n\nUn método rápido y escalable que utiliza la propagación iterativa de etiquetas para asignar nodos a comunidades.\n\nSu simplicidad lo hace adecuado para redes extremadamente grandes, aunque puede generar resultados variables.\n\n\nCada método será descrito en detalle, con explicaciones teóricas, ventajas, desventajas, y ejemplos ilustrativos. Además, se destacarán las mejores prácticas para aplicar estos métodos en el contexto de biología de sistemas y otras áreas.\n\n\nLabusek N, Mouloud Y, Köster C, Diesterbeck E, Tertel T, Wiek C, Hanenberg H, Horn PA, Felderhoff-Müser U, Bendix I, Giebel B, Herz J. Extracellular vesicles from immortalized mesenchymal stromal cells protect against neonatal hypoxic-ischemic brain injury. Inflamm Regen. 2023 Apr 17;43(1):24. doi: 10.1186/s41232-023-00274-6. PMID: 37069694; PMCID: PMC10108458.\nNielsen J, Keasling JD. Engineering Cellular Metabolism. Cell. 2016 Mar 10;164(6):1185-1197. doi: 10.1016/j.cell.2016.02.004. PMID: 26967285.\nGordon DE, Jang GM, Bouhaddou M, Xu J, Obernier K, White KM, O’Meara MJ, Rezelj VV, Guo JZ, Swaney DL, Tummino TA, Hüttenhain R, Kaake RM, Richards AL, Tutuncuoglu B, Foussard H, Batra J, Haas K, Modak M, Kim M, Haas P, Polacco BJ, Braberg H, Fabius JM, Eckhardt M, Soucheray M, Bennett MJ, Cakir M, McGregor MJ, Li Q, Meyer B, Roesch F, Vallet T, Mac Kain A, Miorin L, Moreno E, Naing ZZC, Zhou Y, Peng S, Shi Y, Zhang Z, Shen W, Kirby IT, Melnyk JE, Chorba JS, Lou K, Dai SA, Barrio-Hernandez I, Memon D, Hernandez-Armenta C, Lyu J, Mathy CJP, Perica T, Pilla KB, Ganesan SJ, Saltzberg DJ, Rakesh R, Liu X, Rosenthal SB, Calviello L, Venkataramanan S, Liboy-Lugo J, Lin Y, Huang XP, Liu Y, Wankowicz SA, Bohn M, Safari M, Ugur FS, Koh C, Savar NS, Tran QD, Shengjuler D, Fletcher SJ, O’Neal MC, Cai Y, Chang JCJ, Broadhurst DJ, Klippsten S, Sharp PP, Wenzell NA, Kuzuoglu-Ozturk D, Wang HY, Trenker R, Young JM, Cavero DA, Hiatt J, Roth TL, Rathore U, Subramanian A, Noack J, Hubert M, Stroud RM, Frankel AD, Rosenberg OS, Verba KA, Agard DA, Ott M, Emerman M, Jura N, von Zastrow M, Verdin E, Ashworth A, Schwartz O, d’Enfert C, Mukherjee S, Jacobson M, Malik HS, Fujimori DG, Ideker T, Craik CS, Floor SN, Fraser JS, Gross JD, Sali A, Roth BL, Ruggero D, Taunton J, Kortemme T, Beltrao P, Vignuzzi M, García-Sastre A, Shokat KM, Shoichet BK, Krogan NJ. A SARS-CoV-2 protein interaction map reveals targets for drug repurposing. Nature. 2020 Jul;583(7816):459-468. doi: 10.1038/s41586-020-2286-9. Epub 2020 Apr 30. PMID: 32353859; PMCID: PMC7431030.\nBuenrostro JD, Corces MR, Lareau CA, Wu B, Schep AN, Aryee MJ, Majeti R, Chang HY, Greenleaf WJ. Integrated Single-Cell Analysis Maps the Continuous Regulatory Landscape of Human Hematopoietic Differentiation. Cell. 2018 May 31;173(6):1535-1548.e16. doi: 10.1016/j.cell.2018.03.074. Epub 2018 Apr 26. PMID: 29706549; PMCID: PMC5989727.\nSaxton RA, Sabatini DM. mTOR Signaling in Growth, Metabolism, and Disease. Cell. 2017 Mar 9;168(6):960-976. doi: 10.1016/j.cell.2017.02.004. Erratum in: Cell. 2017 Apr 6;169(2):361-371. doi: 10.1016/j.cell.2017.03.035. PMID: 28283069; PMCID: PMC5394987."
  },
  {
    "objectID": "clustering.html#naturaleza-jerárquica-y-modular-de-los-sistemas-biológicos",
    "href": "clustering.html#naturaleza-jerárquica-y-modular-de-los-sistemas-biológicos",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "",
    "text": "La modularidad es un principio clave en biología de sistemas, pues permite que los componentes de una red biológica interactúen de manera eficiente en subunidades funcionales. Estas subunidades (o módulos) están involucradas en procesos específicos, como la síntesis de proteínas, las rutas metabólicas y la señalización celular.\n\nEn rutas metabólicas:\n\nLos módulos en redes metabólicas representan rutas bioquímicas específicas, donde cada módulo agrupa metabolitos y enzimas que trabajan de manera coordinada.\n\nEjemplo: Estudios han utilizado análisis de modularidad para optimizar la ingeniería metabólica en bacterias como E. coli, dividiendo su red metabólica en módulos para maximizar la producción de biocombustibles (Nielsen & Keasling, 2016).\n\nEn redes de interacción proteína-proteína (PPI):\n\nLas redes PPI son altamente modulares, con módulos que representan complejos proteicos funcionales o grupos de proteínas involucradas en procesos biológicos comunes.\n\nEjemplo: En un análisis de redes de proteínas relacionadas con el cáncer, se identificaron módulos asociados a procesos específicos como la apoptosis y la reparación del ADN. Este enfoque permite priorizar biomarcadores terapéuticos dentro de módulos funcionales.\n\nAdemás, la identificación de módulos en redes virales (como las interacciones entre proteínas del SARS-CoV-2 y del huésped humano) ha revelado objetivos terapéuticos potenciales (Gordon et al., 2020).\n\nEn redes de regulación génica:\n\nLos módulos en redes génicas reflejan conjuntos de genes co-regulados que participan en procesos celulares específicos.\n\nEjemplo: El uso de herramientas como ATAC-seq para analizar redes reguladoras ha permitido identificar módulos específicos activados durante la diferenciación celular (Buenrostro et al., 2018).\n\n\n\n\n\nLa jerarquía en la organización celular es un principio fundamental en la biología que refleja cómo los sistemas biológicos están estructurados en niveles organizativos, desde moléculas hasta células, tejidos, órganos y organismos. Este concepto es crucial para entender redes biológicas y para desarrollar métodos efectivos de clustering, ya que estas redes suelen mostrar propiedades jerárquicas y modulares que reflejan esta organización.\n\n\n\nDefinición: La jerarquía en la biología describe cómo las entidades en un nivel más bajo de organización (p. ej., moléculas) se ensamblan para formar estructuras más complejas (p. ej., organelos, células).\nRelación con redes biológicas: Las redes biológicas, como las de interacción proteína-proteína (PPI, Protein-Protein Interaction), regulan esta organización jerárquica al conectar moléculas que trabajan juntas para realizar funciones específicas.\n\n\n\n\n\nRedes de Interacción Proteína-Proteína (PPI):\n\nLas proteínas que forman parte de un complejo proteico específico suelen estar más conectadas entre sí que con otras proteínas en la red. Por ejemplo, las proteínas ribosomales interactúan predominantemente dentro del ribosoma, formando un módulo altamente cohesivo.\nA nivel jerárquico, los módulos del ribosoma pueden estar conectados con otros módulos relacionados con la síntesis de proteínas.\n\nRedes Metabólicas:\n\nLos metabolitos dentro de una vía metabólica específica (p. ej., glucólisis) están más interconectados entre sí que con metabolitos en otras vías.\nA mayor escala, estas vías metabólicas se agrupan en categorías funcionales más amplias, como el metabolismo energético.\n\nRedes de Señalización:\n\nLas moléculas señalizadoras (como kinases y fosfatasas) tienden a formar módulos relacionados con procesos específicos (p. ej., reparación del ADN o respuesta inmune).\nEstos módulos pueden interactuar en un nivel superior, integrando señales entre distintas rutas de señalización.\n\n\n\n\n\n\nLos algoritmos de clustering jerárquicos (como Edge Betweenness y Fast Greedy) reflejan directamente esta organización jerárquica, ya que identifican subconjuntos dentro de la red a diferentes niveles de resolución.\nPor ejemplo, se pueden identificar módulos más pequeños que representan complejos proteicos individuales y módulos más grandes que conectan complejos relacionados funcionalmente.\n\nDiferenciación entre Escalas: - La jerarquía permite estudiar redes biológicas en múltiples escalas, desde interacciones moleculares específicas hasta sistemas multicelulares completos.\n\nRedes de regulación genética:\n\nLos genes regulados por un mismo factor de transcripción forman módulos cohesivos. A su vez, estos factores se agrupan en niveles superiores de regulación, reflejando una jerarquía en el control de la expresión génica.\n\n\n\n\n\n\n\nEficiencia en la maquinaria celular:\n\nLos módulos permiten realizar tareas específicas de manera eficiente y sin interferencias.\n\nRobustez frente a fallos:\n\nLa jerarquía y modularidad permiten que la red siga funcionando incluso si ciertos nodos fallan.\n\nAdaptabilidad evolutiva:\n\nLos módulos pueden evolucionar independientemente, permitiendo la especialización.\n\n\nEl clustering de redes ha sido utilizado para:\n\nFunción génica y predicción de enfermedades: Los genes asociados a un mismo módulo suelen estar implicados en funciones similares, lo que facilita la anotación funcional de genes no caracterizados.\nDescubrimiento de biomarcadores: En estudios de transcriptómica y proteómica, los módulos identificados pueden revelar biomarcadores asociados a enfermedades o estados fisiológicos específicos .\nModelado de la robustez y vulnerabilidad del sistema: La estructura modular ayuda a entender cómo los sistemas biológicos mantienen su funcionalidad frente a perturbaciones, ya sea mediante redundancia o interacción entre módulos.\nEvolución de las redes biológicas: El análisis de los módulos permite estudiar cómo han evolucionado las interacciones entre genes y proteínas en diferentes especies."
  },
  {
    "objectID": "clustering.html#métodos-de-clustering-cubiertos",
    "href": "clustering.html#métodos-de-clustering-cubiertos",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "",
    "text": "A lo largo de este tutorial, se abordarán cinco métodos principales de clustering, cada uno con características únicas:\n\nEdge Betweenness (Intermediación de Aristas):\n\nIdentifica comunidades al eliminar iterativamente las aristas con mayor intermediación.\n\nEs particularmente útil para redes pequeñas y permite una visualización clara del proceso de partición. Sin embargo, su complejidad lo hace ineficiente para redes grandes.\n\nWalktrap (Caminatas Aleatorias):\n\nUtiliza caminatas aleatorias para detectar comunidades, basándose en la idea de que nodos dentro de una misma comunidad están más “cercanos” en términos probabilísticos.\n\nIdeal para redes medianas con módulos densos y conexos.\n\nFast Greedy (Greedy Maximization of Modularity):\n\nUn método jerárquico que agrupa nodos de manera iterativa para maximizar la modularidad global.\n\nEs eficiente y adecuado para redes grandes, aunque su resolución puede ser limitada en algunos casos.\n\nInfomap:\n\nSe basa en la teoría de la codificación de información para dividir la red en módulos, minimizando la descripción de un caminante aleatorio.\n\nEs particularmente efectivo en redes con muchas comunidades pequeñas.\n\nLabel Propagation:\n\nUn método rápido y escalable que utiliza la propagación iterativa de etiquetas para asignar nodos a comunidades.\n\nSu simplicidad lo hace adecuado para redes extremadamente grandes, aunque puede generar resultados variables.\n\n\nCada método será descrito en detalle, con explicaciones teóricas, ventajas, desventajas, y ejemplos ilustrativos. Además, se destacarán las mejores prácticas para aplicar estos métodos en el contexto de biología de sistemas y otras áreas.\n\n\nLabusek N, Mouloud Y, Köster C, Diesterbeck E, Tertel T, Wiek C, Hanenberg H, Horn PA, Felderhoff-Müser U, Bendix I, Giebel B, Herz J. Extracellular vesicles from immortalized mesenchymal stromal cells protect against neonatal hypoxic-ischemic brain injury. Inflamm Regen. 2023 Apr 17;43(1):24. doi: 10.1186/s41232-023-00274-6. PMID: 37069694; PMCID: PMC10108458.\nNielsen J, Keasling JD. Engineering Cellular Metabolism. Cell. 2016 Mar 10;164(6):1185-1197. doi: 10.1016/j.cell.2016.02.004. PMID: 26967285.\nGordon DE, Jang GM, Bouhaddou M, Xu J, Obernier K, White KM, O’Meara MJ, Rezelj VV, Guo JZ, Swaney DL, Tummino TA, Hüttenhain R, Kaake RM, Richards AL, Tutuncuoglu B, Foussard H, Batra J, Haas K, Modak M, Kim M, Haas P, Polacco BJ, Braberg H, Fabius JM, Eckhardt M, Soucheray M, Bennett MJ, Cakir M, McGregor MJ, Li Q, Meyer B, Roesch F, Vallet T, Mac Kain A, Miorin L, Moreno E, Naing ZZC, Zhou Y, Peng S, Shi Y, Zhang Z, Shen W, Kirby IT, Melnyk JE, Chorba JS, Lou K, Dai SA, Barrio-Hernandez I, Memon D, Hernandez-Armenta C, Lyu J, Mathy CJP, Perica T, Pilla KB, Ganesan SJ, Saltzberg DJ, Rakesh R, Liu X, Rosenthal SB, Calviello L, Venkataramanan S, Liboy-Lugo J, Lin Y, Huang XP, Liu Y, Wankowicz SA, Bohn M, Safari M, Ugur FS, Koh C, Savar NS, Tran QD, Shengjuler D, Fletcher SJ, O’Neal MC, Cai Y, Chang JCJ, Broadhurst DJ, Klippsten S, Sharp PP, Wenzell NA, Kuzuoglu-Ozturk D, Wang HY, Trenker R, Young JM, Cavero DA, Hiatt J, Roth TL, Rathore U, Subramanian A, Noack J, Hubert M, Stroud RM, Frankel AD, Rosenberg OS, Verba KA, Agard DA, Ott M, Emerman M, Jura N, von Zastrow M, Verdin E, Ashworth A, Schwartz O, d’Enfert C, Mukherjee S, Jacobson M, Malik HS, Fujimori DG, Ideker T, Craik CS, Floor SN, Fraser JS, Gross JD, Sali A, Roth BL, Ruggero D, Taunton J, Kortemme T, Beltrao P, Vignuzzi M, García-Sastre A, Shokat KM, Shoichet BK, Krogan NJ. A SARS-CoV-2 protein interaction map reveals targets for drug repurposing. Nature. 2020 Jul;583(7816):459-468. doi: 10.1038/s41586-020-2286-9. Epub 2020 Apr 30. PMID: 32353859; PMCID: PMC7431030.\nBuenrostro JD, Corces MR, Lareau CA, Wu B, Schep AN, Aryee MJ, Majeti R, Chang HY, Greenleaf WJ. Integrated Single-Cell Analysis Maps the Continuous Regulatory Landscape of Human Hematopoietic Differentiation. Cell. 2018 May 31;173(6):1535-1548.e16. doi: 10.1016/j.cell.2018.03.074. Epub 2018 Apr 26. PMID: 29706549; PMCID: PMC5989727.\nSaxton RA, Sabatini DM. mTOR Signaling in Growth, Metabolism, and Disease. Cell. 2017 Mar 9;168(6):960-976. doi: 10.1016/j.cell.2017.02.004. Erratum in: Cell. 2017 Apr 6;169(2):361-371. doi: 10.1016/j.cell.2017.03.035. PMID: 28283069; PMCID: PMC5394987."
  },
  {
    "objectID": "clustering.html#conceptos-básicos-de-edge-betweenness",
    "href": "clustering.html#conceptos-básicos-de-edge-betweenness",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "Conceptos Básicos de Edge Betweenness",
    "text": "Conceptos Básicos de Edge Betweenness\nLa betweenness de una arista es casi el mismo que el centralidad de intermediación que vimos en la primera practica. Pero aqui lo aplicamos a los enlaces, entonces en este caso es una medida que evalúa cuántos caminos más cortos entre pares de nodos pasan por un enlace específica. Enlaces con alta betweenness suelen actuar como “puentes” entre diferentes comunidades dentro de una red.\nMatemáticamente, la betweenness de una arista \\(e\\) se define como:\n\\[\nB(e) = \\sum_{s \\neq t} \\frac{\\sigma_{st}(e)}{\\sigma_{st}}\n\\]\nDonde:\n- \\(\\sigma_{st}\\) es el número total de caminos más cortos entre los nodos \\(s\\) y \\(t\\).\n- \\(\\sigma_{st}(e)\\) es el número de esos caminos que pasan por la arista \\(e\\).\nLa idea central del método es que al eliminar las aristas con mayor betweenness, se separan progresivamente las comunidades que están conectadas de manera más débil.\n\nCómo Funciona el Algoritmo\n\nCálculo de Betweenness Inicial:\nSe calcula la betweenness de todas las aristas en la red. Este paso inicial es computacionalmente costoso, ya que implica evaluar caminos más cortos para todos los pares de nodos.\nEliminación de Aristas:\nSe identifica la arista con el valor más alto de betweenness y se elimina de la red. Esta eliminación puede desconectar nodos o subconjuntos de nodos, formando comunidades más pequeñas.\nReevaluación de Betweenness:\nDespués de eliminar una arista, se recalcula la betweenness de las aristas restantes, ya que la estructura de la red ha cambiado.\nRepetición:\nLos pasos anteriores se repiten iterativamente hasta que todas las aristas hayan sido eliminadas, dejando la red completamente desconectada.\nOptimización:\nDurante el proceso, se evalúan métricas como la modularidad (\\(Q\\)) para determinar el número óptimo de comunidades. La modularidad lo hemos visto antes; mide la calidad de una partición y se define como:\n\\[\nQ = \\frac{1}{2m} \\sum_{i,j} \\left[ A_{ij} - \\frac{k_i k_j}{2m} \\right] \\delta(c_i, c_j)\n\\]\nDonde:\n\n\\(A_{ij}\\): Matriz de adyacencia.\n\n\\(k_i, k_j\\): Grados de los nodos \\(i\\) y \\(j\\).\n\n\\(m\\): Número total de aristas en la red.\n\n\\(\\delta(c_i, c_j)\\): Indicador de si \\(i\\) y \\(j\\) están en la misma comunidad.\n\n\n\n\nVisualización del Proceso de Clustering\nPara comprender cómo funciona el clustering basado en betweenness, podemos visualizar el proceso paso a paso. Comenzamos con el grafo completo y eliminamos iterativamente las aristas con mayor betweenness.\n\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\nlibrary(netUtils)  # For LFR network generation\n\n# Generate a LFR benchmark network with clear communities\nn &lt;- 100  # Number of nodes\ntau1 &lt;- 3  # Degree distribution exponent for nodes\ntau2 &lt;- 1.5  # Degree distribution exponent for communities\nmu &lt;- 0.1  # Mixing parameter (controls inter-community edges)\naverage_degree &lt;- 4  # Desired average degree of nodes\nmax_degree &lt;- 5  # Maximum degree of nodes\n\n# Generate the LFR network using the correct arguments\ng &lt;- sample_lfr(n = n, tau1 = tau1, tau2 = tau2, mu = mu, \n                average_degree = average_degree, max_degree = max_degree)\n\n-----------------------------------------------------------\ncommunity size range automatically set equal to [4 , 5]\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n5 5 5 5 4 5 5 4 4 5 4 4 4 4 5 4 4 5 6 4 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n5 5 5 4 5 5 4 4 5 4 4 4 4 5 4 4 5 6 9 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n5 5 4 5 5 4 4 5 4 4 4 4 5 4 9 5 6 9 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n5 4 5 5 4 4 5 4 4 4 4 5 9 9 5 6 9 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n4 5 5 4 4 5 4 4 4 9 5 9 9 5 6 9 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n5 5 4 4 5 4 4 8 9 5 9 9 5 6 9 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n5 4 4 5 4 9 8 9 5 9 9 5 6 9 9 \n\nit took too long to decide the memberships; I will try to change the community sizes\nnew community sizes\n4 4 5 9 9 8 9 5 9 9 5 6 9 9 \n\n# Calculate edge betweenness\nedge_btw &lt;- edge_betweenness(g)\ntop_edges &lt;- order(edge_btw, decreasing = TRUE)\n\n# Plot settings for consistent layout\nlayout &lt;- layout_with_fr(g)  # Use Fruchterman-Reingold layout for fixed positions\n\n# Plot the original graph with the highest betweenness edges highlighted\nplot(g, layout = layout, main = \"Original LFR Network with High Betweenness Edges\",\n     edge.width = ifelse(rank(-edge_btw) &lt;= 1, 4, 1),  # Highlight top 3 edges\n     edge.color = ifelse(rank(-edge_btw) &lt;= 1, \"red\", \"gray\"),\n     vertex.color = \"skyblue\", vertex.size = 10, vertex.label = NA)\n\n\n\n\n\n\n\n# Stepwise removal of high-betweenness edges\n# Remove top betweenness edges iteratively and plot the result each time\nedge_to_remove &lt;- which.max(edge_btw)\nfor (i in 1:20) {\n  cat(\"Quitando enlace con el \", i, \" mas alta conectividad\\n\")\n  # Identify the edge with the highest betweenness remaining\n\n  g &lt;- delete_edges(g, E(g)[edge_to_remove])\n  \n  # Recalculate connected components\n  components &lt;- clusters(g)\n  \n  # Calculate and print modularity\n  mod &lt;- modularity(g, components$membership)\n\n  \n  # Assign a color to each component\n  component_colors &lt;- rainbow(components$no)[components$membership]\n  \n  # Edge to remove in next iteration:\n  edge_btw &lt;- edge_betweenness(g)\n  edge_to_remove &lt;- which.max(edge_btw)\n  # Plot the graph after each removal\n  plot(g, layout = layout, main = paste(\"After Removing Top\", i, \"High-Betweenness Edges\\n Modularity =\", mod, \"\\n Number of clusters:\", components$no),\n       vertex.color = component_colors, vertex.size = 10, vertex.label = NA,\n            edge.width = ifelse(rank(-edge_btw) &lt;= 1, 4, 1),  # Highlight top 3 edges\n     edge.color = ifelse(rank(-edge_btw) &lt;= 1, \"red\", \"gray\"), edge.width = 1)\n}\n\nQuitando enlace con el  1  mas alta conectividad\n\n\nWarning: `clusters()` was deprecated in igraph 2.0.0.\nℹ Please use `components()` instead.\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  2  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  3  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  4  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  5  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  6  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  7  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  8  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  9  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  10  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  11  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  12  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  13  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  14  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  15  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  16  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  17  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  18  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  19  mas alta conectividad\n\n\n\n\n\n\n\n\n\nQuitando enlace con el  20  mas alta conectividad\n\n\n\n\n\n\n\n\n\n\n\nVentajas y Desventajas\nVentajas:\n- Es un método intuitivo y visual que identifica comunidades de manera progresiva. - Identifica estructuras comunitarias significativas, especialmente en redes con cuellos de botella claros. - Permite una evaluación dinámica de la estructura de la red durante el proceso de partición.\n- Es útil para redes de tamaño moderado con alta conectividad.\nDesventajas:\n- Es computacionalmente intensivo, especialmente para redes grandes, debido a la necesidad de recalcular betweenness iterativamente.\n- Puede ser sensible a pequeñas variaciones en la estructura de la red, lo que afecta la estabilidad de los resultados."
  },
  {
    "objectID": "clustering.html#conceptos-básicos-del-método-walktrap",
    "href": "clustering.html#conceptos-básicos-del-método-walktrap",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "Conceptos Básicos del Método Walktrap",
    "text": "Conceptos Básicos del Método Walktrap\nLa idea principal detrás de Walktrap es que los nodos dentro de la misma comunidad tienden a ser más cercanos en términos de caminos aleatorios que aquellos en comunidades diferentes. Para medir esta cercanía, Walktrap utiliza la distancia de caminos aleatorios entre los nodos, que captura la similitud estructural basada en las trayectorias aleatorias.\nEl algoritmo se basa en los siguientes pasos:\n\nSimulación de Caminos Aleatorios:\nSe simulan caminos aleatorios en la red comenzando desde cada nodo, siguiendo las conexiones existentes.\nCálculo de la Distancia entre Nodos:\nLa distancia entre nodos \\(i\\) y \\(j\\) se mide considerando la probabilidad de que un camino aleatorio que empieza en \\(i\\) llegue a \\(j\\).\nMatemáticamente, la distancia entre comunidades se define como:\n\\[\nd(C_1, C_2) = ||\\mathbf{p}_{C_1} - \\mathbf{p}_{C_2}||^2\n\\]\n\n\n\n\n\n\n\nExplicacion de la formula e intuicion de la distancia\n\n\n\n\n\n\\(\\mathbf{p}_{C_k}\\):\nEste es el vector de probabilidades asociado a la comunidad \\(C_k\\). Cada elemento del vector indica la probabilidad de que un paseo aleatorio en la red se encuentre en un nodo específico de esa comunidad después de un número suficiente de pasos.\n\\(||\\mathbf{p}_{C_1} - \\mathbf{p}_{C_2}||^2\\):\nLa norma cuadrada (distancia euclidiana al cuadrado) mide qué tan diferentes son los vectores de probabilidad de las comunidades \\(C_1\\) y \\(C_2\\). Si esta distancia es pequeña, significa que las probabilidades de navegación en ambas comunidades son similares, lo que sugiere que los nodos están estrechamente conectados entre las comunidades.\nIntuición detrás de la distancia El algoritmo Walktrap utiliza esta métrica para medir la “cercanía” entre comunidades basándose en cómo los paseos aleatorios se distribuyen entre ellas. Dos comunidades serán consideradas “próximas” si: - Los nodos de una comunidad tienen una alta probabilidad de acceder a los nodos de la otra durante un paseo aleatorio.\n- Los vectores de probabilidad \\(\\mathbf{p}_{C_1}\\) y \\(\\mathbf{p}_{C_2}\\) son similares, lo que implica que los nodos están bien conectados a través de enlaces.\nPor el contrario, si la distancia entre comunidades es grande, significa que hay pocos caminos que conectan los nodos entre esas comunidades.\nRelevancia para la Identificación de Comunidades Al fusionar comunidades basándose en esta métrica de distancia, el algoritmo Walktrap asegura que las comunidades agrupadas comparten conexiones significativas, manteniendo un alto grado de coherencia interna. Este proceso gradual de fusión permite identificar estructuras jerárquicas en la red, revelando módulos funcionales.\nEjemplo Biológico En una red de interacción proteína-proteína (PPI), esta métrica podría agrupar proteínas que participan en un mismo complejo funcional o ruta metabólica. Por ejemplo: - Si las proteínas en \\(C_1\\) y \\(C_2\\) tienen roles interdependientes en un proceso celular, los vectores \\(\\mathbf{p}_{C_1}\\) y \\(\\mathbf{p}_{C_2}\\) serán similares. Esto podría corresponder a módulos funcionales como un complejo ribosomal o proteínas de señalización en cascada.\n\n\n\n\nFusión Jerárquica:\nWalktrap utiliza un esquema de clustering aglomerativo jerárquico. Comienza considerando cada nodo como una comunidad separada y fusiona iterativamente las comunidades más cercanas.\nOptimización:\nSe evalúan métricas como la modularidad (\\(Q\\)) para determinar la partición óptima."
  },
  {
    "objectID": "clustering.html#ventajas-y-desventajas-1",
    "href": "clustering.html#ventajas-y-desventajas-1",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "Ventajas y Desventajas",
    "text": "Ventajas y Desventajas\nVentajas:\n- Captura de manera efectiva la estructura modular de redes complejas.\n- Computacionalmente eficiente para redes grandes.\n- Basado en un enfoque probabilístico que refleja mejor la conectividad local.\nDesventajas:\n- Puede no ser tan preciso en redes muy dispersas o con bajo número de conexiones.\n- La elección de la longitud de los caminos aleatorios puede influir en los resultados.\n\nEjemplo en R\nEl siguiente código demuestra cómo aplicar el algoritmo Walktrap a una red simulada y visualizar los resultados:\n\nlibrary(igraph)\n\n# Crear una red de interacción proteína-proteína simulada\nset.seed(42)\ng &lt;- sample_pa(n = 100, m = 2, directed = FALSE)\n\n# Aplicar Walktrap clustering\nwc &lt;- cluster_walktrap(g)\n\n# Visualizar comunidades detectadas\nplot(\n  g,\n  vertex.color = membership(wc),\n  vertex.size = 5,\n  layout = layout_with_fr(g),\n  edge.arrow.size = 0.5,\n  main = \"Clustering basado en Walktrap\"\n)\n\n\n\n\n\n\n\n# Evaluar modularidad\nmodularity(wc)\n\n[1] 0.4314978\n\n\n\n\nVisualización del Funcionamiento del Algoritmo\nEl siguiente ejemplo ilustra cómo Walktrap funciona al fusionar comunidades jerárquicamente, destacando las comunidades formadas en cada paso:\n\n# Create a toy network with modular structure\nset.seed(42)\ng &lt;- make_full_graph(5) %du% make_full_graph(5) %du% make_ring(5)  # Three clusters\ng &lt;- add_edges(g, c(1, 6, 6, 11))  # Add inter-cluster connections\n\n# Plot the original network\nplot(g, vertex.label = NA, main = \"Original Network\", layout = layout_with_fr)\n\n\n\n\n\n\n\n# Perform Walktrap clustering\nwalktrap &lt;- cluster_walktrap(g)\n\n# Extract the number of clusters at each step\nnum_clusters &lt;- rev(seq_along(walktrap$merges))\n\n# Plot function for intermediate clustering steps\nplot_walktrap_progression &lt;- function(graph, walktrap, step) {\n  memberships &lt;- cut_at(walktrap, no = step)  # Cluster memberships at this step\n  node_colors &lt;- rainbow(max(memberships))[memberships]  # Color nodes by cluster\n  \n  plot(graph, \n       vertex.color = node_colors, \n       vertex.label = NA, \n       main = paste(\"Step\", length(walktrap$merges) - step + 1, \n                    \"-\", step, \"Clusters\"),\n       layout = layout_with_fr)\n}\n\n# Visualize clustering steps\nfor (step in c(12, 8, 4, 3)) {  # Select key steps to illustrate progression\n  plot_walktrap_progression(g, walktrap, step)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Plot dendrogram\npar(mfrow = c(1, 1))\nplot_dendrogram(walktrap, main = \"Walktrap Dendrogram\")"
  },
  {
    "objectID": "clustering.html#cómo-funciona-el-algoritmo-fast-greedy",
    "href": "clustering.html#cómo-funciona-el-algoritmo-fast-greedy",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "¿Cómo Funciona el Algoritmo Fast Greedy?",
    "text": "¿Cómo Funciona el Algoritmo Fast Greedy?\n\nModularidad como Métrica Clave\nLa modularidad (\\(Q\\)) mide la calidad de una partición de la red en comunidades, comparando la densidad de aristas dentro de comunidades frente a una red aleatoria con la misma distribución de grados. Matemáticamente (se que ya lo hemos visto antes 2 veces pero es especialmente importante aqui):\n\\[\nQ = \\frac{1}{2m} \\sum_{ij} \\left[A_{ij} - \\frac{k_i k_j}{2m}\\right] \\delta(c_i, c_j)\n\\]\n\n\\(A_{ij}\\): Existencia de una arista entre los nodos \\(i\\) y \\(j\\).\n\n\\(k_i, k_j\\): Grados de los nodos \\(i\\) y \\(j\\).\n\n\\(m\\): Número total de aristas en la red.\n\n\\(\\delta(c_i, c_j)\\): Es 1 si \\(i\\) y \\(j\\) están en la misma comunidad, y 0 en caso contrario.\n\nEstrategia Greedy (Voraz)\nEl algoritmo Fast Greedy sigue una estrategia greedy o voraz, lo que significa que toma decisiones locales en cada paso para mejorar la modularidad. El algoritmo funciona de la siguiente manera:\n\nPaso inicial: Comienza considerando que cada nodo es su propia comunidad.\nFusión de comunidades: En cada paso, fusiona las dos comunidades que más incrementan la modularidad.\nTerminación: El algoritmo continúa fusionando comunidades hasta que no se pueda incrementar más la modularidad.\n\n\nLa eficiencia del algoritmo se debe a que no tiene que evaluar todas las posibles particiones, sino que se concentra en el máximo incremento de modularidad en cada paso. Esto lo hace rápido y adecuado para redes grandes.\n\nResultados Jerárquicos\nSimilar a otros métodos jerárquicos como Walktrap, el algoritmo Fast Greedy genera un dendrograma, que muestra cómo se van fusionando las comunidades a medida que la modularidad se maximiza. Este dendrograma se puede cortar en diferentes niveles de granularidad para obtener particiones de la red con distintas cantidades de comunidades.\n\n\n\n\n\n\n\nModularidad es global o local?\n\n\n\n\n\nLa modularidad es una propiedad global de una red, aunque puede ser calculada localmente cuando se considera una partición específica de la red en comunidades.\nPropiedad Global:\nLa modularidad mide la calidad de toda la partición de una red, es decir, evalúa qué tan bien están agrupados los nodos en comunidades dentro de la red. Compara la densidad real de aristas dentro de las comunidades con lo que se esperaría en una red aleatoria con la misma distribución de grados (el número de aristas conectadas a cada nodo). Esta medida requiere evaluar la estructura completa de la red en relación con la partición propuesta de los nodos.\nCálculo Local:\nAunque la modularidad es una propiedad global de la red, se calcula localmente para cada comunidad durante el proceso de optimización. Cuando se utilizan algoritmos como Fast Greedy o Louvain para detectar comunidades, la modularidad se optimiza mediante la fusión de comunidades basadas en los cambios locales en la puntuación de modularidad. En cada paso, se observa el efecto de fusionar dos comunidades en la modularidad, pero la puntuación total de modularidad considera la estructura de toda la red.\nEn resumen, la modularidad en sí es una propiedad global que depende de toda la estructura de la red y de la partición de los nodos, pero la optimización (o el cálculo) se realiza a través de decisiones locales iterativas sobre cómo fusionar o dividir las comunidades.\n\n\n\n\nVentajas y Desventajas\nVentajas:\n\nEscalabilidad: El algoritmo es rápido y adecuado para redes grandes con miles de nodos.\nOptimización directa de modularidad: La modularidad proporciona una métrica intuitiva para evaluar la calidad del clustering, lo que facilita la interpretación de los resultados.\nIdentificación clara de comunidades: Dado que se enfoca en maximizar la modularidad, es particularmente efectivo en redes densas donde las comunidades están bien definidas.\n\nDesventajas:\n\nRedes con estructuras pequeñas o solapadas: El algoritmo puede no funcionar bien cuando las comunidades son pequeñas o se solapan mucho, ya que la estrategia greedy no siempre puede detectar estos patrones sutiles.\nRedes dispersas: En redes con muy pocas conexiones internas entre nodos dentro de cada comunidad, el algoritmo puede tener dificultades para identificar bien las comunidades.\n\n\n\nEjemplo en R\nEl siguiente código muestra cómo aplicar el algoritmo Fast Greedy a una red simulada. En este caso, se utiliza una red aleatoria generada mediante el modelo de Preferential Attachment (sample_pa), que tiene una estructura modular natural.\n\nlibrary(igraph)\n\n# Crear una red simulada\nset.seed(42)\ng &lt;- sample_pa(n = 100, m = 2, directed = FALSE)  # Red generada con el modelo Preferential Attachment\n\n# Aplicar el algoritmo Fast Greedy\nfc &lt;- cluster_fast_greedy(g)\n\n# Visualizar las comunidades\nplot(\n  g,\n  vertex.color = membership(fc),  # Colorear nodos según las comunidades\n  layout = layout_with_fr(g),  # Layout Fruchterman-Reingold para visualizar la red\n  vertex.size = 5,  # Tamaño de los nodos\n  main = \"Clustering Basado en Fast Greedy\"\n)\n\n\n\n\n\n\n\n# Mostrar la modularidad de la partición\ncat(\"Modularidad:\", modularity(fc), \"\\n\")\n\nModularidad: 0.4494963 \n\n\n\n\nExplicación del Código:\n\nGeneración de la red: Usamos el modelo de Preferential Attachment (sample_pa) para crear una red con 100 nodos y una probabilidad de 2 conexiones por nodo. Este modelo genera una red con una estructura de “preferencia” donde los nodos más conectados tienen más probabilidades de atraer nuevas conexiones, lo que lleva a una red con estructuras jerárquicas y comunidades naturales.\nAplicación del algoritmo: Utilizamos la función cluster_fast_greedy() de igraph para aplicar el algoritmo Fast Greedy a la red generada. El algoritmo detecta las comunidades optimizando la modularidad.\nVisualización: En el gráfico generado, los nodos se colorean según las comunidades detectadas por el algoritmo, y se utiliza el layout de Fruchterman-Reingold para visualizar la red de manera que las comunidades estén lo más separadas posible.\nModularidad: Finalmente, se imprime el valor de la modularidad (\\(Q\\)) de la partición obtenida. Este valor indica la calidad de la partición, siendo un valor alto una señal de que las comunidades están bien definidas."
  },
  {
    "objectID": "clustering.html#cómo-funciona-el-algoritmo-de-label-propagation",
    "href": "clustering.html#cómo-funciona-el-algoritmo-de-label-propagation",
    "title": "Partición de grafos (I). Módulos en redes biológicas",
    "section": "¿Cómo Funciona el Algoritmo de Label Propagation?",
    "text": "¿Cómo Funciona el Algoritmo de Label Propagation?\nEl algoritmo de Label Propagation sigue un proceso iterativo en el que cada nodo de la red tiene una “etiqueta” inicial (generalmente, su propio identificador o una etiqueta aleatoria). La idea principal es que los nodos en la misma comunidad tienden a compartir las mismas etiquetas, por lo que a través de la propagación de etiquetas, los nodos de una misma comunidad convergerán hacia la misma etiqueta.\nAquí está el proceso paso a paso:\n\nInicialización: Cada nodo recibe una etiqueta inicial. Por lo general, cada nodo comienza con una etiqueta única o aleatoria. En este caso, asumimos que cada nodo está en su propia comunidad.\nPropagación: En cada paso, cada nodo actualiza su etiqueta en función de las etiquetas de sus vecinos. La etiqueta que un nodo adoptará es la etiqueta más frecuente entre sus vecinos. Si varios vecinos tienen etiquetas diferentes, el nodo elige aleatoriamente entre las etiquetas más frecuentes.\nRepetición: Este proceso de actualización de etiquetas se repite varias veces (hasta que no haya cambios) o durante un número de iteraciones predefinido. A medida que se repiten las iteraciones, los nodos que están más cerca entre sí en la red empiezan a compartir la misma etiqueta, formando comunidades.\nFinalización: El algoritmo finaliza cuando las etiquetas de todos los nodos dejan de cambiar. En ese momento, las comunidades están definidas por los nodos que comparten la misma etiqueta.\n\n\nVentajas y Desventajas\nVentajas: - Escalabilidad: El algoritmo es muy eficiente, especialmente en redes grandes, ya que no requiere el cálculo de métricas complejas, como la modularidad. - Simplicidad: Es un algoritmo simple de entender e implementar. No requiere ninguna información de la estructura global de la red, solo las conexiones locales entre los nodos.\nDesventajas: - Estabilidad: Puede ser sensible al orden de los nodos en las iteraciones. En redes con estructuras complejas o de gran tamaño, la convergencia puede ser lenta o inestable. - Dependencia de la inicialización: Los resultados pueden depender de cómo se asignan las etiquetas iniciales. En algunos casos, el algoritmo puede dar lugar a particiones inadecuadas si no se tiene en cuenta la conectividad entre los nodos. - Comunidad solapada: No es adecuado para detectar comunidades solapadas, donde un nodo pertenece a varias comunidades al mismo tiempo."
  },
  {
    "objectID": "analisis_topo_1.html",
    "href": "analisis_topo_1.html",
    "title": "Biología de Sistemas",
    "section": "",
    "text": "La modularidad es una medida de la estructura de una red que evalúa la fortaleza de la división de la red en módulos o comunidades. Un módulo es un conjunto de nodos que están más densamente conectados entre sí en comparación con otros nodos de la red. La modularidad es útil para identificar comunidades o agrupamientos dentro de la red.\nLa modularidad se calcula comparando la densidad de conexiones dentro de los módulos con la que se esperaría en una red aleatoria con la misma distribución de grados.\n\n\nLa modularidad, ( Q ), de una partición en módulos se calcula usando la siguiente ecuación:\n\\[\nQ = \\frac{1}{2m} \\sum_{i,j} \\left( A_{ij} - \\frac{k_i k_j}{2m} \\right) \\delta(c_i, c_j)\n\\]\ndonde: - \\(m\\) es el número total de aristas en la red. - \\(A_{ij}\\) es el valor en la posición \\((i, j)\\) de la matriz de adyacencia, donde \\(A_{ij} = 1\\) si hay una arista entre los nodos \\(i\\) y \\(j\\), y \\(0\\) en caso contrario. - \\(k_i\\) y \\(k_j\\) son los grados de los nodos \\(i\\) y \\(j\\), respectivamente. - \\(\\delta(c_i, c_j)\\) es la función delta de Kronecker, que es 1 si \\(c_i = c_j\\) (es decir, los nodos \\(i\\) y \\(j\\) están en el mismo módulo) y 0 en caso contrario.\nLa modularidad \\(Q\\) varía entre -1 y 1, donde valores cercanos a 1 indican una alta modularidad, es decir, una red con comunidades bien definidas. Valores cercanos a 0 o negativos indican una estructura comunitaria poco definida o inexistente.\nAquí tienes la sección revisada con dos ejemplos utilizando sample_islands, que ilustran redes con modularidad alta y baja. Esta función crea redes con distintas “islas” o comunidades y nos permite ajustar el número de nodos y el nivel de conectividad entre comunidades para observar el efecto en la modularidad."
  },
  {
    "objectID": "analisis_topo_1.html#modularity-en-redes",
    "href": "analisis_topo_1.html#modularity-en-redes",
    "title": "Biología de Sistemas",
    "section": "",
    "text": "La modularidad es una medida de la estructura de una red que evalúa la fortaleza de la división de la red en módulos o comunidades. Un módulo es un conjunto de nodos que están más densamente conectados entre sí en comparación con otros nodos de la red. La modularidad es útil para identificar comunidades o agrupamientos dentro de la red.\nLa modularidad se calcula comparando la densidad de conexiones dentro de los módulos con la que se esperaría en una red aleatoria con la misma distribución de grados.\n\n\nLa modularidad, ( Q ), de una partición en módulos se calcula usando la siguiente ecuación:\n\\[\nQ = \\frac{1}{2m} \\sum_{i,j} \\left( A_{ij} - \\frac{k_i k_j}{2m} \\right) \\delta(c_i, c_j)\n\\]\ndonde: - \\(m\\) es el número total de aristas en la red. - \\(A_{ij}\\) es el valor en la posición \\((i, j)\\) de la matriz de adyacencia, donde \\(A_{ij} = 1\\) si hay una arista entre los nodos \\(i\\) y \\(j\\), y \\(0\\) en caso contrario. - \\(k_i\\) y \\(k_j\\) son los grados de los nodos \\(i\\) y \\(j\\), respectivamente. - \\(\\delta(c_i, c_j)\\) es la función delta de Kronecker, que es 1 si \\(c_i = c_j\\) (es decir, los nodos \\(i\\) y \\(j\\) están en el mismo módulo) y 0 en caso contrario.\nLa modularidad \\(Q\\) varía entre -1 y 1, donde valores cercanos a 1 indican una alta modularidad, es decir, una red con comunidades bien definidas. Valores cercanos a 0 o negativos indican una estructura comunitaria poco definida o inexistente.\nAquí tienes la sección revisada con dos ejemplos utilizando sample_islands, que ilustran redes con modularidad alta y baja. Esta función crea redes con distintas “islas” o comunidades y nos permite ajustar el número de nodos y el nivel de conectividad entre comunidades para observar el efecto en la modularidad."
  },
  {
    "objectID": "analisis_topo_1.html#modularidad-en-redes-y-su-cálculo-en-igraph",
    "href": "analisis_topo_1.html#modularidad-en-redes-y-su-cálculo-en-igraph",
    "title": "Biología de Sistemas",
    "section": "Modularidad en Redes y su Cálculo en igraph",
    "text": "Modularidad en Redes y su Cálculo en igraph\nLa modularidad en redes se refiere a la tendencia de los nodos a agruparse en comunidades o módulos. Este concepto es fundamental en el análisis de redes complejas, ya que una modularidad alta indica que la red tiene comunidades bien definidas, donde las conexiones dentro de cada comunidad son densas y las conexiones entre comunidades son escasas. En biología, esta estructura modular es común en redes como las de interacción proteica y rutas metabólicas.\n\nEcuación de la Modularidad\nLa modularidad de una partición de la red en comunidades se calcula mediante la fórmula:\n[ Q = _{i,j} (c_i, c_j) ]\ndonde: - ( A_{ij} ) es la matriz de adyacencia de la red (1 si hay una conexión entre (i) y (j), 0 en caso contrario), - ( k_i ) y ( k_j ) son los grados de los nodos (i) y (j), - ( m ) es el número total de enlaces en la red, - ( (c_i, c_j) ) es una función que es 1 si los nodos (i) y (j) están en la misma comunidad y 0 en caso contrario.\nEsta ecuación permite calcular un valor de modularidad ( Q ) para evaluar qué tan bien definida está la estructura modular de una red.\n\n\nEjemplos de Redes con Alta y Baja Modularidad usando sample_islands\n\nEjemplo 1: Red con Alta Modularidad\nEn este ejemplo, crearemos una red con varias comunidades bien definidas, donde los nodos dentro de cada comunidad están fuertemente conectados entre sí, pero las conexiones entre comunidades son escasas. Esto genera una alta modularidad.\n\n# Cargar el paquete igraph\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n# Crear una red con alta modularidad usando sample_islands\nset.seed(3)\ng_high_modularity &lt;- sample_islands(islands.n=4, islands.size=10, islands.pin=0.8, n.inter=3)\n\n# Detectar comunidades usando el algoritmo de Louvain\ncommunity_high &lt;- cluster_louvain(g_high_modularity)\n\n# Calcular la modularidad\nmodularity_high &lt;- modularity(community_high)\ncat(\"Modularidad de la red con alta modularidad:\", modularity_high, \"\\n\")\n\nModularidad de la red con alta modularidad: 0.6414937 \n\n# Visualizar la red y las comunidades\nV(g_high_modularity)$color &lt;- membership(community_high)\nplot(g_high_modularity, vertex.color = V(g_high_modularity)$color, main = \"Red con Alta Modularidad\")\n\n\n\n\n\n\n\n\nEn este caso, la modularidad es alta, lo cual indica que la red presenta comunidades bien definidas, con muchos enlaces dentro de cada comunidad y pocos entre ellas. Este tipo de estructura es común en redes biológicas robustas, como las de interacción proteica en células especializadas.\n\n\nEjemplo 2: Red con Baja Modularidad\nA continuación, crearemos una red con menor modularidad, utilizando sample_islands con menos comunidades y mayor conectividad entre ellas. Esto reduce la modularidad, pues los nodos están más distribuidos y menos agrupados en módulos.\n\n# Crear una red con baja modularidad usando sample_islands\nset.seed(4)\ng_low_modularity &lt;- sample_islands(islands.n=4, islands.size=10, islands.pin=0.3, n.inter=5)\n\n# Detectar comunidades usando el algoritmo de Louvain\ncommunity_low &lt;- cluster_louvain(g_low_modularity)\n\n# Calcular la modularidad\nmodularity_low &lt;- modularity(community_low)\ncat(\"Modularidad de la red con baja modularidad:\", modularity_low, \"\\n\")\n\nModularidad de la red con baja modularidad: 0.4427343 \n\n# Visualizar la red y las comunidades\nV(g_low_modularity)$color &lt;- membership(community_low)\nplot(g_low_modularity, vertex.color = V(g_low_modularity)$color, main = \"Red con Baja Modularidad\")\n\n\n\n\n\n\n\n\nEn esta red, la modularidad es más baja debido a la mayor conectividad entre las comunidades, lo cual dificulta identificar módulos bien definidos. Redes de este tipo pueden aparecer en sistemas biológicos menos especializados o en procesos donde existe una integración funcional alta entre diferentes módulos, como en algunas redes metabólicas.\n\n\n\nInterpretación en Biología\nLa modularidad alta en redes biológicas es indicativa de una especialización funcional, donde cada módulo o comunidad realiza una función específica. Por otro lado, redes con baja modularidad pueden sugerir funciones integradas y sistemas menos especializados. En biología de sistemas, analizar la modularidad ayuda a descubrir módulos funcionales y a entender la organización jerárquica de los sistemas biológicos.\n\n\nDescripción del Código\n\nDetección de Comunidades: Utilizamos cluster_louvain para detectar comunidades en la red. Este algoritmo es eficiente para maximizar la modularidad y encontrar módulos bien definidos.\nCálculo de Modularidad: Con modularity(community), calculamos la modularidad de la partición de la red en comunidades. Esto nos da una medida de la calidad de la estructura de la red en términos de módulos.\nVisualización de Comunidades: Coloreamos los nodos de acuerdo con la comunidad a la que pertenecen usando membership(community) para facilitar la visualización de las divisiones de la red.\n\n\n\n\nInterpretación de Modularidad\nUn valor alto de modularidad sugiere que la red tiene una estructura de comunidad fuerte, con nodos más densamente conectados dentro de los módulos y menos conectados con nodos de otros módulos. La modularidad es especialmente útil en biología para identificar grupos funcionales de proteínas en redes de interacción o redes de coexpresión genética, donde los módulos pueden representar rutas o complejos funcionales."
  },
  {
    "objectID": "analisis_topo_1.html#modularidad-en-redes-biológicas-y-su-aplicación-en-biología-de-sistemas",
    "href": "analisis_topo_1.html#modularidad-en-redes-biológicas-y-su-aplicación-en-biología-de-sistemas",
    "title": "Biología de Sistemas",
    "section": "Modularidad en Redes Biológicas y su Aplicación en Biología de Sistemas",
    "text": "Modularidad en Redes Biológicas y su Aplicación en Biología de Sistemas\nEn biología, la modularidad es fundamental para analizar la organización de redes complejas, como redes de interacción proteica, redes de regulación genética y redes metabólicas. En estas redes, la modularidad ayuda a identificar complejos de proteínas, rutas metabólicas, y módulos funcionales que son esenciales para procesos celulares específicos. Estos módulos reflejan funciones biológicas que están integradas y muchas veces aisladas en cuanto a su función dentro de la célula, haciendo de la modularidad una herramienta poderosa para descubrir nuevas relaciones biológicas y entender la robustez de los sistemas.\n\nEjemplo 1: Red de Interacción Proteica\nEn una red de interacción proteica, los nodos representan proteínas y las aristas representan interacciones físicas entre ellas. Las proteínas suelen agruparse en complejos que funcionan conjuntamente en procesos celulares específicos. Al analizar la modularidad de esta red, se pueden identificar módulos que representan estos complejos proteicos.\nCódigo en igraph para analizar una red de interacción proteica simulada:\n\n# Crear una red simulada con estructura modular, representando interacción proteica\nset.seed(1)\ng_protein &lt;- sample_pa(50, m = 3, directed = FALSE)\n\n# Detectar comunidades en la red de interacción proteica usando el algoritmo de Louvain\ncommunity_protein &lt;- cluster_louvain(g_protein)\n\n# Calcular la modularidad de la partición\nmodularity_protein &lt;- modularity(community_protein)\ncat(\"Modularidad de la red de interacción proteica:\", modularity_protein, \"\\n\")\n\nModularidad de la red de interacción proteica: 0.3002508 \n\n# Visualizar la red y las comunidades\nV(g_protein)$color &lt;- membership(community_protein)\nplot(g_protein, vertex.color = V(g_protein)$color, main = \"Red de Interacción Proteica con Comunidades\")\n\n\n\n\n\n\n\n\nEn este ejemplo, cada módulo (comunidad) detectado podría corresponder a un complejo proteico. La modularidad cuantifica la efectividad de esta división y sugiere una estructura comunitaria bien definida si el valor es alto, lo cual es común en redes biológicas debido a la especialización de funciones.\n\n\nEjemplo 2: Red Metabólica\nEn una red metabólica, los nodos representan metabolitos y las aristas representan reacciones bioquímicas que convierten un metabolito en otro. La modularidad en este contexto puede ayudar a identificar rutas metabólicas o subconjuntos de metabolitos y reacciones que forman un proceso metabólico completo, como la glucólisis o el ciclo del ácido cítrico.\nCódigo en igraph para analizar una red metabólica simulada:\n\n# Crear una red metabólica simulada con estructura modular\nset.seed(2)\ng_metabolic &lt;- sample_smallworld(1, 50, 4, 0.05)\n\n# Detectar comunidades en la red metabólica usando el algoritmo de Louvain\ncommunity_metabolic &lt;- cluster_louvain(g_metabolic)\n\n# Calcular la modularidad de la partición\nmodularity_metabolic &lt;- modularity(community_metabolic)\ncat(\"Modularidad de la red metabólica:\", modularity_metabolic, \"\\n\")\n\nModularidad de la red metabólica: 0.518775 \n\n# Visualizar la red y las comunidades\nV(g_metabolic)$color &lt;- membership(community_metabolic)\nplot(g_metabolic, vertex.color = V(g_metabolic)$color, main = \"Red Metabólica con Comunidades\")\n\n\n\n\n\n\n\n\nEn este ejemplo, las comunidades o módulos identificados por la modularidad pueden representar rutas metabólicas en las cuales los metabolitos y reacciones están funcionalmente conectados. Esto permite el análisis de las interacciones metabólicas y cómo se organizan en la red celular.\n\n\nInterpretación en Biología de Sistemas\nLa modularidad es particularmente relevante en biología de sistemas para modelar la organización funcional de las redes biológicas y su robustez. Las redes altamente modulares tienden a ser más robustas frente a perturbaciones, ya que los módulos actúan de manera relativamente independiente. Por ejemplo: - En redes de interacción genética, los módulos pueden representar genes que participan en rutas reguladoras específicas. - En redes de señalización celular, la modularidad permite identificar cascadas de señalización, lo que ayuda a comprender cómo las células responden a estímulos externos de manera organizada.\nLa modularidad, al permitir identificar estas estructuras funcionales dentro de la red, ayuda a los investigadores a proponer nuevas hipótesis sobre el funcionamiento de los sistemas biológicos y la evolución de su organización."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Home",
    "section": "",
    "text": "Aqui encuentrarás la material para la sección de James R. Perkins en Biología de Sistemas, Grado en Ingeniería de la Salud, Universidad de Málaga"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "analisis_topo_2.html",
    "href": "analisis_topo_2.html",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "",
    "text": "Este tutorial es la segunda parte de un análisis detallado de redes aplicado a la biología. En el primer tutorial, exploramos propiedades básicas como el grado (degree), el coeficiente de clustering y algunas métricas de intermediación (betweenness). Estas propiedades nos brindan una comprensión inicial de cómo los nodos y las conexiones en una red contribuyen a su estructura y funcionalidad general.\nEn esta segunda parte, profundizaremos en métricas avanzadas que describen aspectos estructurales y dinámicos de redes biológicas complejas, como la modularidad, densidad de aristas (edge density), dispersión (sparsity), homofilia (homophily), asortatividad (assortativity), diámetro de la red (network diameter) y longitud promedio de los caminos (average path length). Además, abordaremos propiedades clave como la robustez de la red, la centralidad (con nuevos enfoques) y el concepto de percolación, además del flujo y difusión en redes. Con ejemplos prácticos en biología y fragmentos de código en R, este tutorial facilita la comprensión de cómo estas propiedades se pueden aplicar para analizar sistemas biológicos, como redes de proteínas y metabolitos, y su resiliencia ante cambios como mutaciones o intervenciones farmacológicas."
  },
  {
    "objectID": "analisis_topo_2.html#cómo-se-calcula-la-modularidad",
    "href": "analisis_topo_2.html#cómo-se-calcula-la-modularidad",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "¿Cómo se calcula la modularidad?",
    "text": "¿Cómo se calcula la modularidad?\nLa modularidad \\(Q\\) se calcula para evaluar si una red tiene una estructura modular significativa. La ecuación básica para la modularidad de una red es:\n\\[\nQ = \\frac{1}{2m} \\sum_{i,j} \\left( A_{ij} - \\frac{k_i k_j}{2m} \\right) \\delta(c_i, c_j)\n\\]\nDonde:\n\n\\(Q\\) es el valor de modularidad.\n\\(m\\) es el número total de aristas en la red.\n\\(A\\_{ij}\\) representa la entrada en la posición \\((i, j)\\) de la matriz de adyacencia de la red, donde \\(A_{ij} = 1\\) si hay una arista entre los nodos \\(i\\) y \\(j\\), y \\(A_{ij} = 0\\) si no la hay.\n\\(k_i\\) es el grado del nodo \\(i\\) (es decir, el número de conexiones que tiene el nodo \\(i\\)).\n\\(\\delta(c_i, c_j)\\) es una función indicadora que es igual a 1 si los nodos \\(i\\) y \\(j\\) pertenecen a la misma comunidad y 0 en caso contrario.\n\nEsta ecuación compara la densidad de enlaces dentro de las comunidades con la densidad esperada de enlaces si las conexiones fueran aleatorias, es decir, si la red se hubiera generado de forma aleatoria manteniendo el mismo grado de cada nodo.\n\nPasos detallados para calcular la modularidad\n\nIdentificar la estructura de la comunidad: La red se divide en comunidades o módulos (grupos de nodos densamente conectados entre sí). Esto puede hacerse con algoritmos específicos como el algoritmo de Louvain o el algoritmo de agrupamiento fast-greedy, que buscan maximizar la modularidad \\(Q\\) dividiendo la red en comunidades. Veremos mas algoritmos de clusterizacion en la siguiente parte teorica.\nCalcular la matriz de adyacencia y el grado: A partir de la estructura de la red, construimos la matriz de adyacencia \\(A\\) y calculamos el grado de cada nodo \\(k_i\\).\nSumar las diferencias entre enlaces observados y esperados: Para cada par de nodos \\(i\\) y \\(j\\), se calcula \\(A_{ij} - \\frac{k_i k_j}{2m}\\). Este término controla por el grado de los nods \\(i\\) y \\(j\\).\nSumar los valores para los pares dentro de la misma comunidad: Los valores obtenidos en el paso anterior se suman únicamente para los pares de nodos \\((i, j)\\) que están dentro de la misma comunidad (esto lo controla la función \\(\\delta(c_i, c_j)\\)).\nNormalizar por el número total de enlaces: Finalmente, el resultado se multiplica por \\(\\frac{1}{2m}\\) para obtener el valor final de modularidad \\(Q\\).\n\nUn valor de \\(Q\\) alto indica una fuerte estructura modular, lo que significa que los nodos están agrupados en comunidades bien definidas. En cambio, un valor bajo o cercano a cero sugiere que los enlaces dentro y entre comunidades no difieren mucho de lo que se esperaría en una red aleatoria."
  },
  {
    "objectID": "analisis_topo_2.html#ejemplo-biológico-de-modularidad",
    "href": "analisis_topo_2.html#ejemplo-biológico-de-modularidad",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Ejemplo Biológico de Modularidad",
    "text": "Ejemplo Biológico de Modularidad\nEn redes de interacción proteína-proteína, la modularidad puede identificar comunidades que corresponden a complejos proteicos funcionales o a proteínas que participan en la misma ruta metabólica. Por ejemplo, en una red de proteínas involucradas en la respuesta inmune, los módulos de alta modularidad pueden corresponder a diferentes mecanismos inmunitarios, como la respuesta inflamatoria o la activación de células T."
  },
  {
    "objectID": "analisis_topo_2.html#código-en-r-para-calcular-modularidad",
    "href": "analisis_topo_2.html#código-en-r-para-calcular-modularidad",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Código en R para Calcular Modularidad",
    "text": "Código en R para Calcular Modularidad\nEl siguiente código en R utiliza igraph para calcular la modularidad en dos redes con diferentes estructuras:\nAquí tienes un ejemplo en R que crea dos redes: una con alta modularidad y otra con baja modularidad. Este código ilustra la diferencia de modularidad usando comunidades claramente definidas para la red modular, mientras que la red no modular tendrá conexiones distribuidas de manera más uniforme sin comunidades definidas.\n\n# Cargamos el paquete igraph\nlibrary(igraph)\n\n\nAttaching package: 'igraph'\n\n\nThe following objects are masked from 'package:stats':\n\n    decompose, spectrum\n\n\nThe following object is masked from 'package:base':\n\n    union\n\n# Creamos una red con alta modularidad utilizando la función sample_islands\n# Esta red tendrá 4 comunidades internas con enlaces densos entre nodos dentro de cada comunidad\nset.seed(42)\nhigh_modularity_network &lt;- sample_islands(4, 10, 0.8, 3)\n\n# Visualizamos la red de alta modularidad\nplot(high_modularity_network, main = \"Red con Alta Modularidad\", vertex.color = membership(cluster_louvain(high_modularity_network)), vertex.size = 8, edge.arrow.size = 0.5)\n\n\n\n\n\n\n\n# Calculamos y mostramos la modularidad de la red de alta modularidad\nhigh_modularity_value &lt;- modularity(cluster_louvain(high_modularity_network))\ncat(\"Modularidad de la red con alta modularidad:\", high_modularity_value, \"\\n\")\n\nModularidad de la red con alta modularidad: 0.6358356 \n\n# Creamos una red con baja modularidad usando una red aleatoria sin comunidades definidas\n# Usamos la función erdos.renyi.game para crear una red aleatoria\nlow_modularity_network &lt;- sample_gnp(40, p = 0.1, directed = FALSE)\n\n# Visualizamos la red de baja modularidad\nplot(low_modularity_network, main = \"Red con Baja Modularidad\", vertex.color = membership(cluster_louvain(low_modularity_network)), vertex.size = 8, edge.arrow.size = 0.5)\n\n\n\n\n\n\n\n# Calculamos y mostramos la modularidad de la red de baja modularidad\nlow_modularity_value &lt;- modularity(cluster_louvain(low_modularity_network))\ncat(\"Modularidad de la red con baja modularidad:\", low_modularity_value, \"\\n\")\n\nModularidad de la red con baja modularidad: 0.3727328 \n\n\n\nExplicación del código\n\nRed con alta modularidad:\n\nCreamos una red usando sample_islands que genera “islas” o grupos de nodos con conexiones internas densas y pocas conexiones entre grupos.\nEsto produce comunidades internas bien definidas, lo que incrementa el valor de la modularidad.\nLa función modularity mide este valor, y deberías obtener un valor de modularidad relativamente alto (cerca de 1, dependiendo de los parámetros de entrada).\n\nRed con baja modularidad:\n\nCreamos una red aleatoria con la función sample_gnp, en la cual los enlaces se distribuyen de manera uniforme y no hay comunidades claras.\nLa modularidad para esta red debería ser baja porque no hay agrupamiento natural en comunidades.\nVisualizamos y calculamos la modularidad, la cual debería ser un valor bajo (cercano a cero), indicando una red con baja modularidad.\n\n\n\n\nInterpretación de los Resultados\n\nLa red con alta modularidad tendrá nodos dentro de cada comunidad (en este caso, cuatro) con conexiones internas fuertes y escasas conexiones con nodos de otras comunidades. Esto resulta en una modularidad alta, ya que \\(A_{ij}\\) dentro de las comunidades es significativamente mayor al esperado.\nLa red con baja modularidad no tendrá comunidades bien definidas. Las conexiones están distribuidas aleatoriamente, por lo que la diferencia entre el número de enlaces reales y el número esperado será baja, dando como resultado una modularidad baja.\n\nEste ejemplo permite ver gráficamente y numéricamente cómo las diferentes configuraciones de enlaces afectan el valor de la modularidad."
  },
  {
    "objectID": "analisis_topo_2.html#densidad-de-aristas-edge-density",
    "href": "analisis_topo_2.html#densidad-de-aristas-edge-density",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Densidad de Aristas (Edge Density)",
    "text": "Densidad de Aristas (Edge Density)\nLa densidad en una red de señalización indica cuántas interacciones existen en relación con el total de interacciones posibles. En redes biológicas, particularmente en sistemas de señalización celular, la densidad puede influir en cómo se propagan las señales, en la redundancia de la información y en la posibilidad de regulaciones complejas.\n\nEjemplo en Redes de Señalización: Vía MAPK (Red Densa): La vía de señalización Mitogen-Activated Protein Kinase (MAPK) es un buen ejemplo de una red densa en el contexto de señalización celular. Esta vía está implicada en la respuesta celular a estímulos como factores de crecimiento, citoquinas y estrés, y se caracteriza por varias capas de interacciones en cascada de proteínas quinasa que activan múltiples proteínas aguas abajo. MAPK tiene una alta redundancia y una conectividad extensa, lo cual significa que si una conexión falla, hay rutas alternativas que permiten la continuidad de la señal. Esto permite una señalización robusta y adaptativa, con la capacidad de responder a múltiples estímulos simultáneamente.\n\nAlta Densidad: La red MAPK tiende a ser densa porque las proteínas dentro de esta vía pueden interactuar con múltiples blancos, y existen circuitos de retroalimentación que amplifican o modulan la señal. Esta interconectividad genera una red con muchas aristas en relación al número de nodos, lo que se refleja en un alto valor de densidad. Esta densidad permite a la vía responder de manera efectiva y rápida, esencial en procesos como la división celular, la diferenciación y la respuesta al estrés.\nLa densidad (\\(D\\)) se calcula de la siguiente manera:\n\\[\nD = \\frac{2m}{n(n-1)}\n\\]\nDonde: - \\(D\\) es la densidad, - \\(m\\) es el número de aristas presentes en la red, - \\(n\\) es el número de nodos."
  },
  {
    "objectID": "analisis_topo_2.html#dispersión-sparsity",
    "href": "analisis_topo_2.html#dispersión-sparsity",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Dispersión (Sparsity)",
    "text": "Dispersión (Sparsity)\nLa dispersión complementa a la densidad y ayuda a entender la organización de redes dispersas, comunes en sistemas de señalización que requieren alta especificidad. La dispersión se calcula como:\n\\[\n\\text{Dispersión} = 1 - D\n\\]\ndonde \\(D\\) es la densidad de aristas. Una red con alta dispersión indica una arquitectura que favorece interacciones específicas y minimiza la redundancia, lo cual es común en redes de señalización de cascadas enzimáticas donde la señal sigue una ruta secuencial, evitando activaciones erróneas.\n\nEjemplo en Rutas de Señalización:\n\nVía TGF-beta (Red Dispersa): En contraste al MAPK, la vía de Transforming Growth Factor-beta (TGF-beta) representa una red de señalización más lineal y específica. TGF-beta inicia la señalización mediante la activación de complejos de receptores y la fosforilación de proteínas SMAD, las cuales se translocan al núcleo para regular la transcripción génica. Debido a que esta señalización se desarrolla en un camino relativamente directo, la vía TGF-beta suele tener menos conexiones redundantes entre sus componentes en comparación con MAPK, lo cual resulta en una red con menor densidad.\nBaja Densidad (Alta Dispersión): La menor cantidad de interacciones entre nodos en la vía TGF-beta se traduce en una baja densidad de aristas y mayor dispersión. Esto es adecuado para su función de iniciar cambios genéticos específicos sin desencadenar múltiples respuestas o activar rutas cruzadas extensas, permitiendo un control más preciso y limitado. Aunque TGF-beta también puede interactuar con otras vías de señalización, su arquitectura básica suele mostrar menos interconexión y redundancia que MAPK."
  },
  {
    "objectID": "analisis_topo_2.html#cálculo-de-densidad-y-dispersión-en-r",
    "href": "analisis_topo_2.html#cálculo-de-densidad-y-dispersión-en-r",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Cálculo de Densidad y Dispersión en R",
    "text": "Cálculo de Densidad y Dispersión en R\nUsaremos código en R para ilustrar cómo estas métricas se aplican a redes con diferentes densidades.\n\n# Cargamos la librería igraph\nlibrary(igraph)\n\n# Creamos una red dispersa para representar una señalización específica y especializada\nsparse_network &lt;- sample_gnp(30, p = 0.1, directed = FALSE)\n\n# Creamos una red densa para representar un sistema de señalización redundante\ndense_network &lt;- sample_gnp(30, p = 0.5, directed = FALSE)\n\n# Calculamos la densidad de cada red\nsparse_density &lt;- edge_density(sparse_network)\ndense_density &lt;- edge_density(dense_network)\n\n# Calculamos la dispersión\nsparse_sparsity &lt;- 1 - sparse_density\ndense_sparsity &lt;- 1 - dense_density\n\n# Imprimimos los resultados\ncat(\"Densidad de la red dispersa (especialización):\", sparse_density, \"\\n\")\n\nDensidad de la red dispersa (especialización): 0.09885057 \n\ncat(\"Densidad de la red densa (redundancia):\", dense_density, \"\\n\")\n\nDensidad de la red densa (redundancia): 0.4735632 \n\ncat(\"Dispersión de la red dispersa:\", sparse_sparsity, \"\\n\")\n\nDispersión de la red dispersa: 0.9011494 \n\ncat(\"Dispersión de la red densa:\", dense_sparsity, \"\\n\")\n\nDispersión de la red densa: 0.5264368 \n\n# Visualizamos las redes\nplot(sparse_network, main = \"Red Dispersa (Señalización Especializada)\", vertex.size = 8, vertex.label = NA)\n\n\n\n\n\n\n\nplot(dense_network, main = \"Red Densa (Señalización Redundante)\", vertex.size = 8, vertex.label = NA)\n\n\n\n\n\n\n\n\n\nInterpretación del Código\n\nRed Dispersa: Representa un sistema de señalización específico, como la señalización de TGF-beta, donde cada proteína interactúa con un número limitado de proteínas. Esto es ideal para asegurar que la señalización siga una ruta secuencial y específica.\nRed Densa: Modela un sistema de señalización con redundancia, como la vía MAPK. En este sistema, existen múltiples rutas alternativas para la propagación de la señal, aumentando la robustez del sistema y asegurando que la célula pueda responder adecuadamente a estímulos críticos."
  },
  {
    "objectID": "analisis_topo_2.html#aplicaciones-de-densidad-y-dispersión",
    "href": "analisis_topo_2.html#aplicaciones-de-densidad-y-dispersión",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Aplicaciones de Densidad y Dispersión",
    "text": "Aplicaciones de Densidad y Dispersión\n\nRedes de Señalización Celular Complejas: En sistemas como la señalización en células inmunitarias, la densidad puede variar significativamente. Una densidad alta puede ser ventajosa para asegurar respuestas rápidas y fuertes, como en la activación de linfocitos T en respuesta a una infección. Sin embargo, la dispersión alta también puede ser útil para redes que necesitan especificidad y precisión, como en la regulación de citocinas, donde una señalización muy dispersa evita que células no implicadas respondan erróneamente.\nOptimización de Fármacos Basada en la Estructura de la Red: Las redes densas pueden ofrecer múltiples puntos de intervención farmacológica debido a su redundancia, pero también presentan el desafío de efectos secundarios no deseados. En contraste, redes dispersas ofrecen objetivos específicos, aunque los efectos de los fármacos pueden depender de la precisión con la que se interrumpe una señal en particular."
  },
  {
    "objectID": "analisis_topo_2.html#entendiendo-la-longitud-promedio-de-camino",
    "href": "analisis_topo_2.html#entendiendo-la-longitud-promedio-de-camino",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Entendiendo la Longitud Promedio de Camino",
    "text": "Entendiendo la Longitud Promedio de Camino\nLa longitud promedio de camino en una red se define como el número promedio de pasos a lo largo de los caminos más cortos para todos los pares de nodos en la red. Es una medida importante de la propiedad de “pequeño mundo” de una red. En redes biológicas, las longitudes promedio de camino cortas suelen indicar una red altamente conectada y eficiente, mientras que las longitudes largas pueden sugerir redes más modulares o segregadas.\nMatemáticamente, la longitud promedio de camino \\(L_{avg}\\) para un grafo no dirigido se calcula como:\n\\[\nL_{avg} = \\frac{1}{N(N-1)} \\sum_{i \\neq j} d(i,j)\n\\]\ndonde \\(d(i,j)\\) es el camino más corto entre los nodos \\(i\\) y \\(j\\), y \\(N\\) es el número total de nodos en la red."
  },
  {
    "objectID": "analisis_topo_2.html#redes-con-longitudes-promedio-de-camino-cortas-redes-de-pequeño-mundo",
    "href": "analisis_topo_2.html#redes-con-longitudes-promedio-de-camino-cortas-redes-de-pequeño-mundo",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Redes con Longitudes Promedio de Camino Cortas (Redes de Pequeño Mundo)",
    "text": "Redes con Longitudes Promedio de Camino Cortas (Redes de Pequeño Mundo)\nLas redes de pequeño mundo tienen la característica de una longitud promedio de camino corta, lo que significa que, a pesar del tamaño de la red, cualquier par de nodos puede ser alcanzado en solo unos pocos pasos. Estas redes son comunes en sistemas biológicos y redes sociales, donde los nodos están altamente interconectados.\n\nEjemplo: Redes de Interacción Proteína-Proteína (PPI)\nEn las redes de interacción proteína-proteína (PPI), las proteínas son los nodos y las interacciones entre ellas son los bordes. La longitud promedio de camino en una red PPI bien conectada puede ser bastante corta, lo que refleja el alto grado de interconexión entre proteínas en procesos biológicos clave.\nEjemplo de Código en R: Aquí tienes un fragmento de código en R que genera una red de pequeño mundo y calcula la longitud promedio de camino.\n\n# Cargar las bibliotecas necesarias\nlibrary(igraph)\n\n# Crear una red de pequeño mundo\nsmall_world_net &lt;- sample_pa(100, m=2)  # Adquisición preferencial, genera propiedades de pequeño mundo\nplot(small_world_net)\n\n\n\n\n\n\n\n# Calcular la longitud promedio de camino\naverage_path_length &lt;- mean_distance(small_world_net)\naverage_path_length\n\n[1] 1.842884\n\n\n\n\nEjemplo: Redes de Regulación Génica\nEn las redes de regulación génica, donde los genes son los nodos y las interacciones regulatorias entre ellos son los bordes, una longitud promedio de camino corta puede indicar que los genes se están regulando de manera eficiente entre sí, a menudo debido a factores de transcripción compartidos o mecanismos co-regulatorios.\n\n\nEjemplo Fuera de la Biología: Redes Sociales\nEn las redes sociales, donde las personas son los nodos y las interacciones sociales son los bordes, las longitudes promedio de camino son a menudo cortas. Por ejemplo, en el famoso experimento de “seis grados de separación”, se descubrió que las personas están generalmente conectadas por un promedio de solo 6 grados de separación."
  },
  {
    "objectID": "analisis_topo_2.html#redes-con-longitudes-promedio-de-camino-largas-redes-modulares",
    "href": "analisis_topo_2.html#redes-con-longitudes-promedio-de-camino-largas-redes-modulares",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Redes con Longitudes Promedio de Camino Largas (Redes Modulares)",
    "text": "Redes con Longitudes Promedio de Camino Largas (Redes Modulares)\nPor otro lado, las redes con longitudes promedio de camino largas suelen exhibir una estructura modular o jerárquica, donde los clústeres de nodos altamente conectados (módulos) solo están débilmente conectados entre sí. Estas redes suelen ser menos eficientes en cuanto a la transferencia de información.\n\nEjemplo Biológico 1: Redes Cerebrales\nEn las redes cerebrales, donde las regiones del cerebro son los nodos y las conexiones funcionales o anatómicas entre ellas son los bordes, la red podria hipotéticamente tener una longitud promedio de camino más larga. La estructura modular del cerebro, con regiones distintas para funciones cognitivas diferentes, contribuye a una mayor longitud de camino entre regiones distantes.\nEjemplo de Código en R: Aquí tienes un ejemplo de cómo generar una red modular y calcular su longitud promedio de camino.\n\n# Generar una red modular (utilizando el modelo de Watts-Strogatz para redes de pequeño mundo)\nmodular_net &lt;- sample_smallworld(1, 100, 4, 0.07)  # Probabilidad de reconfiguración baja\nplot(modular_net)\n\n\n\n\n\n\n\n# Calcular la longitud promedio de camino\naverage_path_length_modular &lt;- mean_distance(modular_net)\naverage_path_length_modular\n\n[1] 2.863232\n\n\n\n\nEjemplo Biológico 2: Redes Ecológicas\nEn las redes ecológicas (como las redes tróficas), donde las especies son los nodos y las relaciones de alimentación son los bordes, la red suele tener una longitud promedio de camino más larga. Las especies a menudo se agrupan en grupos funcionales, y las interacciones dentro de estos grupos son mucho más frecuentes que las interacciones entre grupos.\n\n\nEjemplo Fuera de la Biología: Red de Internet\nEn la topología física de Internet, donde los routers y servidores son los nodos, la red puede exhibir una longitud promedio de camino más larga. A pesar de la vasta cantidad de conexiones, la red suele estar organizada de manera modular, donde diferentes regiones o subredes están más conectadas entre sí, lo que lleva a caminos más largos entre nodos distantes.\nLa longitud promedio de camino es una característica fundamental de las redes que puede revelar propiedades estructurales importantes. Las longitudes promedio de camino cortas sugieren un sistema eficiente y conectado, mientras que las largas indican una estructura más modular o jerárquica. Comprender cómo funciona la longitud promedio de camino en redes biológicas y no biológicas puede proporcionar valiosos conocimientos sobre su dinámica, conectividad y robustez."
  },
  {
    "objectID": "analisis_topo_2.html#diámetro-diameter",
    "href": "analisis_topo_2.html#diámetro-diameter",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Diámetro (Diameter)",
    "text": "Diámetro (Diameter)\nEl diámetro de una red es la longitud del camino más corto entre nodos mas largo entre cualquier par de nodos en la red. Es decir, el diámetro es el valor máximo de las distancias más cortas \\(d(i,j)\\) entre nodos \\(i\\) y \\(j\\). Esta medida es importante porque da una idea de cuán “extendida” o “compacta” es la red en términos de conectividad.\nEl diámetro \\(D\\) de una red se calcula como:\n\\[\nD = \\max_{i \\neq j} d(i,j)\n\\]\ndonde \\(d(i,j)\\) es la distancia más corta entre los nodos \\(i\\) y \\(j\\).\n\nRelación entre Longitud Promedio de Camino y Diámetro\n\nRedes con Longitud Promedio de Camino Corta (Pequeño Mundo): En redes de pequeño mundo, el diámetro suele ser relativamente pequeño debido a la alta conectividad, lo que permite que cualquier par de nodos esté cerca el uno del otro.\nRedes con Longitud Promedio de Camino Larga (Modulares): En redes modulares, el diámetro suele ser más largo, ya que los nodos dentro de un módulo están bien conectados, pero los módulos en sí mismos tienen una menor conectividad, lo que aumenta la distancia entre nodos de diferentes módulos.\n\n\n\nCálculo del Diámetro en Redes de R\nAquí te muestro cómo calcular el diámetro de la red utilizando R, tanto para redes de pequeño mundo como para redes modulares.\n\nlibrary(igraph)\n\n# Generar una red de pequeño mundo (preferential attachment) con 100 nodos y 2 conexiones por nodo\nsmall_world_net &lt;- sample_pa(100, m = 2)\n\n# Calcular el diámetro de la red de pequeño mundo\ndiameter_small_world &lt;- diameter(small_world_net)\ncat(\"Diámetro de la red de pequeño mundo: \", diameter_small_world, \"\\n\")\n\nDiámetro de la red de pequeño mundo:  5 \n\n# Generar una red modular (modelo de Watts-Strogatz) con 100 nodos, 4 vecinos por nodo, y probabilidad de reconexión baja (0.01)\nmodular_net &lt;- sample_smallworld(1, 100, 4, 0.01)\n\n# Calcular el diámetro de la red modular\ndiameter_modular &lt;- diameter(modular_net)\ncat(\"Diámetro de la red modular: \", diameter_modular, \"\\n\")\n\nDiámetro de la red modular:  8 \n\n# Graficar ambas redes\nplot(small_world_net, main = paste(\"Red de Pequeño Mundo\\nDiámetro: \", diameter_small_world), vertex.size = 5, vertex.label = NA)\n\n\n\n\n\n\n\nplot(modular_net, main = paste(\"Red Modular\\nDiámetro: \", diameter_modular), vertex.size = 5, vertex.label = NA)\n\n\n\n\n\n\n\n\n\n\nRelación entre Diámetro y Propiedades de Red\n\nRedes de Pequeño Mundo: Las redes de pequeño mundo tienen un diámetro bajo, lo que significa que las distancias más largas entre los nodos son pequeñas, lo que las hace más eficientes en términos de conectividad.\nRedes Modulares: Las redes modulares tienen un diámetro mayor porque los módulos son menos interdependientes, lo que genera distancias más largas entre nodos de diferentes módulos."
  },
  {
    "objectID": "analisis_topo_2.html#ejemplos-de-redes-con-asortatividad-positiva-y-negativa",
    "href": "analisis_topo_2.html#ejemplos-de-redes-con-asortatividad-positiva-y-negativa",
    "title": "Análisis de Grafos y Topología de Redes (II): Modularidad, Densidad, Longitudes Promedio de Camino, Assortividad",
    "section": "Ejemplos de Redes con Asortatividad Positiva y Negativa",
    "text": "Ejemplos de Redes con Asortatividad Positiva y Negativa\n\nAsortatividad Positiva\nEn redes con asortatividad positiva, los nodos con grados similares tienden a conectarse entre sí. Este patrón fomenta la formación de comunidades o módulos, lo que refuerza la resiliencia y la cohesión de la red.\n\nRedes de Interacción Proteína-Proteína (PPI):\nLas proteínas de alto grado (hubs) tienden a interactuar con otras proteínas igualmente conectadas, formando complejos funcionales específicos. Por ejemplo, en la maquinaria ribosomal, las proteínas ribosómicas suelen agruparse para garantizar una síntesis proteica eficiente.\nRedes Sociales:\nEn redes como LinkedIn, las personas con muchas conexiones suelen estar vinculadas a otros usuarios con un número similar de contactos, lo que genera grupos profesionales densamente interconectados.\n\n\n\nAsortatividad Negativa\nEn redes con asortatividad negativa, los nodos de alto grado tienden a conectarse con nodos de bajo grado. Este patrón es típico de sistemas diseñados para maximizar la eficiencia y la transferencia de recursos o información.\n\nRedes Metabólicas:\nLos metabolitos universales, como el ATP, actúan como hubs al conectar múltiples metabolitos específicos con roles clave en diversas rutas metabólicas. Este diseño asegura que el ATP pueda participar rápidamente en numerosas reacciones bioquímicas.\nRedes de Transporte:\nEn redes aéreas, los aeropuertos internacionales (hubs) están conectados con aeropuertos regionales más pequeños. Esto optimiza el flujo de pasajeros y carga en el sistema global.\n\n\n\nComparación en Biología\n\nLa asortatividad positiva refuerza la estabilidad dentro de módulos funcionales, como complejos proteicos específicos.\n\nLa asortatividad negativa mejora la flexibilidad y la integración en sistemas jerárquicos, como en la regulación metabólica o genética.\n\nAmbos patrones reflejan estrategias de diseño adaptativas que optimizan la funcionalidad en redes biológicas y tecnológicas."
  },
  {
    "objectID": "analisis_topo.html",
    "href": "analisis_topo.html",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "",
    "text": "La biología de sistemas se basa en el uso de redes para entender las interacciones complejas en sistemas biológicos. En este tutorial, exploraremos los conceptos fundamentales de grafos y redes utilizando el paquete igraph en R.\nPrimero, aseguramos de tener instalado el paquete igraph:\n\n\nUn grafo es una estructura matemática que se compone de un conjunto de nodos (o vértices) y un conjunto de aristas (o enlaces) que conectan pares de nodos. Los grafos son útiles en diversas disciplinas, incluida la biología, para modelar relaciones y interacciones entre diferentes entidades, como proteínas, genes y metabolitos.\n\n\n\nNodos (Vértices): Los elementos individuales de un grafo. Un grafo se puede definir como \\(G = (V, E)\\), donde \\(V\\) es el conjunto de nodos y \\(E\\) es el conjunto de aristas. En biología, un nodo puede representar una proteína, un gen o cualquier otra entidad de interés.\nAristas (Enlaces): Las conexiones entre los nodos. En un grafo que representa interacciones proteína-proteína (como STRINGdb por ejemplo), una arista podría indicar que dos proteínas interactúan. Matemáticamente, cada arista se puede representar como un par ordenado de nodos: \\(e = (u, v)\\), donde \\(u, v \\in V\\).\nGrado (Degree): El grado de un nodo \\(v\\) es el número de aristas que inciden en él. Por ejemplo en el siguiente red, los nodos 1, 2 y 4 tienen un grado de dos. El nodo 3 tiene un grado de tres. Esto es una red no-dirigida, o un grafo en el que las aristas no tienen dirección, lo que implica una relación simétrica entre nodos.\n\nPara el nodo \\(i\\)-ésimo en una red, denotaremos su grado como \\(k_i\\). Por lo tanto, para el siguiente red, \\(k_4 = 1\\), \\(k_1 = k_2 = 2\\) y \\(k_3 = 3\\).\n\npar(mar = c(1, 1, 1, 1))\ng1 &lt;- make_graph(edges = c(1, 2, 1, 3, 2, 3, 3, 4), n = 4, directed = FALSE)\nplot(g1)\n\n\n\n\n\n\n\n\nComo se mencionó anteriormente, el número total de enlaces se denota como \\(E\\). En una red no dirigida, es fácil entender que \\(E\\) debería ser la mitad de la suma de todos los grados de los nodos. Esto es porque cada enlace pertenece a dos nodos y, por lo tanto, cada enlace se cuenta dos veces. Así tenemos:\n\\[\nE = \\frac{1}{2} \\sum_{i=1}^{N} k_i\n\\]\nEn la red anterior, \\(E = 4\\).\nEl grado medio, denotado como \\(\\langle k \\rangle\\), es simplemente la media de todos los grados de los nodos en una red. Para la red anterior, tenemos:\n\\[\n\\langle k \\rangle = \\frac{1}{4} \\cdot (k_1 + k_2 + k_3 + k_4) = \\frac{1}{4} \\cdot (2 + 2 + 3 + 1) = 2\n\\]\nEsto significa que, en promedio, cada nodo en la red tiene 2 enlaces.\nDe acuerdo con su definición, sabemos que:\n\\[\n\\langle k \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} k_i\n\\]\nCombinando esto con la Ecuación previa, obtenemos:\n\\[\n\\langle k \\rangle = \\frac{2E}{N}\n\\]\nUn nodo con un alto grado tiene muchas conexiones, lo que puede indicar que es una proteína central o un hub en una red biológica.\n\nGrafo dirigido (Directed Graph): Un grafo en el que las aristas tienen una dirección, es decir, indican una relación asimétrica entre dos nodos. En este caso, cada arista se representa como un par ordenado \\(e = (u, v)\\), donde \\(u\\) apunta a \\(v\\). Por ejemplo:\n\n\ng2 &lt;- make_graph(edges = c(1, 2, 1, 3, 2, 3, 3, 4), n = 4, directed = TRUE)\npar(mar = c(1, 1, 1, 1))\nplot(g2)\n\n\n\n\n\n\n\n\nCada enlace en la red anterior es dirigido. Si calculamos el grado medio de la red según la ecuación para redes no dirigdas, perderemos información.\nPor lo tanto, distinguimos entre el grado de entrada, denotado como \\(k_{\\text{in}_i}\\), y el grado de salida, denotado como \\(k_{\\text{out}_i}\\). \\(k_{\\text{in}_i}\\) representa el número de enlaces de otros nodos que apuntan al nodo \\(i\\), y \\(k_{\\text{out}_i}\\) representa el número de enlaces que parten del nodo ( i ) y apuntan a otros nodos.\nPara un nodo \\(i\\) en una red dirigida, su grado es la suma del grado de entrada y el grado de salida. Por lo tanto,\n\\[\nk_i = k_{\\text{in}_i} + k_{\\text{out}_i}\n\\]\nY \\(E\\), el número total de enlaces en una red dirigida, es:\n\\[\nE = \\sum_{i=1}^{N} k_{\\text{in}_i} = \\sum_{i=1}^{N} k_{\\text{out}_i}\n\\]\nPara un enlace dirigido entre el nodo \\(i\\) y el nodo \\(j\\), es decir, \\((i, j)\\), este constituye un grado de entrada para un nodo, pero un grado de salida para el otro. Por ejemplo, en la red dirigida, el enlace \\((1,2)\\) cuenta como un grado de entrada para el nodo 2, pero como un grado de salida para el nodo 1.\n¿Cuál es el grado medio en una red dirigida?\n\\[\n\\langle k_{\\text{in}} \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} k_{\\text{in}_i} = \\langle k_{\\text{out}} \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} k_{\\text{out}_i} = \\frac{E}{N}\n\\]\n\nCaminos y Ciclos:\n\nCamino (Path): Una secuencia de nodos \\(v_1, v_2, \\ldots, v_k\\) donde cada par de nodos adyacentes está conectado por una arista. Matemáticamente, esto se expresa como: \\[\nP = (v_1, v_2, \\ldots, v_k) \\text{ tal que } (v_i, v_{i+1}) \\in E \\text{ para } 1 \\leq i &lt; k\n\\]\nCiclo (Cycle): Un camino que comienza y termina en el mismo nodo sin repetir ninguna arista. Se define como: \\[\nC = (v_1, v_2, \\ldots, v_k, v_1) \\text{ tal que } (v_i, v_{i+1}) \\in E \\text{ para } 1 \\leq i &lt; k \\text{ y } (v_k, v_1) \\in E\n\\]\n\nSubgrafo (Subgraph): Un grafo que está compuesto por un subconjunto de los nodos y aristas de un grafo original \\(G\\). Se puede denotar como \\(H = (V_H, E_H)\\), donde \\(V_H \\subseteq V\\) y \\(E_H \\subseteq E\\).\nConectividad (Connectivity):\n\nEn teoría de grafos, la conectividad es una medida de la robustez de una red y describe la densidad con la que los nodos están conectados entre sí. La conectividad puede analizarse tanto a nivel de nodos como de aristas:\n\nConectividad de Nodos: refiere al número mínimo de nodos que deben eliminarse para que el grafo se vuelva disconexo o para separar un componente del resto de la red. Un grafo con alta conectividad de nodos es más robusto, ya que no se desconecta fácilmente ante la eliminación de unos pocos nodos.\nConectividad de Aristas: refiere al número mínimo de aristas que deben eliminarse para que el grafo se vuelva disconexo. La eliminación de una sola arista en un grafo con baja conectividad puede hacer que la red se divida en componentes.\n\n\n\n\nEn este ejemplo, mostramos un grafo completo de 5 nodos. En un grafo completo, cada nodo está conectado a todos los demás, lo que genera múltiples caminos alternativos entre los nodos y, por tanto, una alta conectividad.\n\n# Grafo completo de 5 nodos (alta conectividad)\ng_high &lt;- make_full_graph(5)\nplot(g_high, main = \"Grafo con Alta Conectividad\")\n\n\n\n\n\n\n\n# Verificamos la conectividad de nodos y aristas\ncat(\"Conectividad de nodos (g_high):\", vertex_connectivity(g_high), \"\\n\")\n\nConectividad de nodos (g_high): 4 \n\ncat(\"Conectividad de aristas (g_high):\", edge_connectivity(g_high), \"\\n\")\n\nConectividad de aristas (g_high): 4 \n\ncat(\"¿Es conexo (g_high)?\", is_connected(g_high), \"\\n\")\n\n¿Es conexo (g_high)? TRUE \n\n\nGrafo con alta conectividad.\nEn este caso, la función vertex_connectivity(g_high) y edge_connectivity(g_high) muestran que el grafo tiene alta conectividad de nodos y de aristas, ya que ambos valores serán altos en un grafo completo. La función is_connected(g_high) devolverá TRUE, indicando que el grafo es conexo.\n\n\n\nEn el segundo ejemplo, tenemos un grafo lineal o en forma de cadena. Este grafo tiene baja conectividad de nodos y aristas, ya que la eliminación de un nodo o arista específico puede desconectar la red.\n\n# Grafo lineal de 5 nodos (baja conectividad)\ng_low &lt;- make_graph(edges = c(1, 2, 2, 3, 3, 4, 4, 5), n = 5, directed = FALSE)\nplot(g_low, main = \"Grafo con Baja Conectividad\")\n\n\n\n\n\n\n\n# Verificamos la conectividad de nodos y aristas\ncat(\"Conectividad de nodos (g_low):\", vertex_connectivity(g_low), \"\\n\")\n\nConectividad de nodos (g_low): 1 \n\ncat(\"Conectividad de aristas (g_low):\", edge_connectivity(g_low), \"\\n\")\n\nConectividad de aristas (g_low): 1 \n\ncat(\"¿Es conexo (g_low)?\", is_connected(g_low), \"\\n\")\n\n¿Es conexo (g_low)? TRUE \n\n\nGrafo con baja conectividad.\nEn este grafo lineal, la conectividad de nodos y de aristas es baja. La eliminación del nodo central (nodo 3) o cualquiera de sus aristas adyacentes desconectaría el grafo, dividiéndolo en dos componentes separados. En este caso, la función is_connected(g_low) devolverá TRUE, indicando que el grafo es conexo en su estado actual, pero su conectividad es débil.\nEn redes grandes y complejas, la conectividad es crucial para determinar la robustez de la red frente a la eliminación de nodos o aristas. Un grafo con alta conectividad es menos susceptible a la desconexión, mientras que uno con baja conectividad puede dividirse fácilmente ante la pérdida de algunos elementos."
  },
  {
    "objectID": "analisis_topo.html#qué-es-un-grafo",
    "href": "analisis_topo.html#qué-es-un-grafo",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "",
    "text": "Un grafo es una estructura matemática que se compone de un conjunto de nodos (o vértices) y un conjunto de aristas (o enlaces) que conectan pares de nodos. Los grafos son útiles en diversas disciplinas, incluida la biología, para modelar relaciones y interacciones entre diferentes entidades, como proteínas, genes y metabolitos.\n\n\n\nNodos (Vértices): Los elementos individuales de un grafo. Un grafo se puede definir como \\(G = (V, E)\\), donde \\(V\\) es el conjunto de nodos y \\(E\\) es el conjunto de aristas. En biología, un nodo puede representar una proteína, un gen o cualquier otra entidad de interés.\nAristas (Enlaces): Las conexiones entre los nodos. En un grafo que representa interacciones proteína-proteína (como STRINGdb por ejemplo), una arista podría indicar que dos proteínas interactúan. Matemáticamente, cada arista se puede representar como un par ordenado de nodos: \\(e = (u, v)\\), donde \\(u, v \\in V\\).\nGrado (Degree): El grado de un nodo \\(v\\) es el número de aristas que inciden en él. Por ejemplo en el siguiente red, los nodos 1, 2 y 4 tienen un grado de dos. El nodo 3 tiene un grado de tres. Esto es una red no-dirigida, o un grafo en el que las aristas no tienen dirección, lo que implica una relación simétrica entre nodos.\n\nPara el nodo \\(i\\)-ésimo en una red, denotaremos su grado como \\(k_i\\). Por lo tanto, para el siguiente red, \\(k_4 = 1\\), \\(k_1 = k_2 = 2\\) y \\(k_3 = 3\\).\n\npar(mar = c(1, 1, 1, 1))\ng1 &lt;- make_graph(edges = c(1, 2, 1, 3, 2, 3, 3, 4), n = 4, directed = FALSE)\nplot(g1)\n\n\n\n\n\n\n\n\nComo se mencionó anteriormente, el número total de enlaces se denota como \\(E\\). En una red no dirigida, es fácil entender que \\(E\\) debería ser la mitad de la suma de todos los grados de los nodos. Esto es porque cada enlace pertenece a dos nodos y, por lo tanto, cada enlace se cuenta dos veces. Así tenemos:\n\\[\nE = \\frac{1}{2} \\sum_{i=1}^{N} k_i\n\\]\nEn la red anterior, \\(E = 4\\).\nEl grado medio, denotado como \\(\\langle k \\rangle\\), es simplemente la media de todos los grados de los nodos en una red. Para la red anterior, tenemos:\n\\[\n\\langle k \\rangle = \\frac{1}{4} \\cdot (k_1 + k_2 + k_3 + k_4) = \\frac{1}{4} \\cdot (2 + 2 + 3 + 1) = 2\n\\]\nEsto significa que, en promedio, cada nodo en la red tiene 2 enlaces.\nDe acuerdo con su definición, sabemos que:\n\\[\n\\langle k \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} k_i\n\\]\nCombinando esto con la Ecuación previa, obtenemos:\n\\[\n\\langle k \\rangle = \\frac{2E}{N}\n\\]\nUn nodo con un alto grado tiene muchas conexiones, lo que puede indicar que es una proteína central o un hub en una red biológica.\n\nGrafo dirigido (Directed Graph): Un grafo en el que las aristas tienen una dirección, es decir, indican una relación asimétrica entre dos nodos. En este caso, cada arista se representa como un par ordenado \\(e = (u, v)\\), donde \\(u\\) apunta a \\(v\\). Por ejemplo:\n\n\ng2 &lt;- make_graph(edges = c(1, 2, 1, 3, 2, 3, 3, 4), n = 4, directed = TRUE)\npar(mar = c(1, 1, 1, 1))\nplot(g2)\n\n\n\n\n\n\n\n\nCada enlace en la red anterior es dirigido. Si calculamos el grado medio de la red según la ecuación para redes no dirigdas, perderemos información.\nPor lo tanto, distinguimos entre el grado de entrada, denotado como \\(k_{\\text{in}_i}\\), y el grado de salida, denotado como \\(k_{\\text{out}_i}\\). \\(k_{\\text{in}_i}\\) representa el número de enlaces de otros nodos que apuntan al nodo \\(i\\), y \\(k_{\\text{out}_i}\\) representa el número de enlaces que parten del nodo ( i ) y apuntan a otros nodos.\nPara un nodo \\(i\\) en una red dirigida, su grado es la suma del grado de entrada y el grado de salida. Por lo tanto,\n\\[\nk_i = k_{\\text{in}_i} + k_{\\text{out}_i}\n\\]\nY \\(E\\), el número total de enlaces en una red dirigida, es:\n\\[\nE = \\sum_{i=1}^{N} k_{\\text{in}_i} = \\sum_{i=1}^{N} k_{\\text{out}_i}\n\\]\nPara un enlace dirigido entre el nodo \\(i\\) y el nodo \\(j\\), es decir, \\((i, j)\\), este constituye un grado de entrada para un nodo, pero un grado de salida para el otro. Por ejemplo, en la red dirigida, el enlace \\((1,2)\\) cuenta como un grado de entrada para el nodo 2, pero como un grado de salida para el nodo 1.\n¿Cuál es el grado medio en una red dirigida?\n\\[\n\\langle k_{\\text{in}} \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} k_{\\text{in}_i} = \\langle k_{\\text{out}} \\rangle = \\frac{1}{N} \\sum_{i=1}^{N} k_{\\text{out}_i} = \\frac{E}{N}\n\\]\n\nCaminos y Ciclos:\n\nCamino (Path): Una secuencia de nodos \\(v_1, v_2, \\ldots, v_k\\) donde cada par de nodos adyacentes está conectado por una arista. Matemáticamente, esto se expresa como: \\[\nP = (v_1, v_2, \\ldots, v_k) \\text{ tal que } (v_i, v_{i+1}) \\in E \\text{ para } 1 \\leq i &lt; k\n\\]\nCiclo (Cycle): Un camino que comienza y termina en el mismo nodo sin repetir ninguna arista. Se define como: \\[\nC = (v_1, v_2, \\ldots, v_k, v_1) \\text{ tal que } (v_i, v_{i+1}) \\in E \\text{ para } 1 \\leq i &lt; k \\text{ y } (v_k, v_1) \\in E\n\\]\n\nSubgrafo (Subgraph): Un grafo que está compuesto por un subconjunto de los nodos y aristas de un grafo original \\(G\\). Se puede denotar como \\(H = (V_H, E_H)\\), donde \\(V_H \\subseteq V\\) y \\(E_H \\subseteq E\\).\nConectividad (Connectivity):\n\nEn teoría de grafos, la conectividad es una medida de la robustez de una red y describe la densidad con la que los nodos están conectados entre sí. La conectividad puede analizarse tanto a nivel de nodos como de aristas:\n\nConectividad de Nodos: refiere al número mínimo de nodos que deben eliminarse para que el grafo se vuelva disconexo o para separar un componente del resto de la red. Un grafo con alta conectividad de nodos es más robusto, ya que no se desconecta fácilmente ante la eliminación de unos pocos nodos.\nConectividad de Aristas: refiere al número mínimo de aristas que deben eliminarse para que el grafo se vuelva disconexo. La eliminación de una sola arista en un grafo con baja conectividad puede hacer que la red se divida en componentes.\n\n\n\n\nEn este ejemplo, mostramos un grafo completo de 5 nodos. En un grafo completo, cada nodo está conectado a todos los demás, lo que genera múltiples caminos alternativos entre los nodos y, por tanto, una alta conectividad.\n\n# Grafo completo de 5 nodos (alta conectividad)\ng_high &lt;- make_full_graph(5)\nplot(g_high, main = \"Grafo con Alta Conectividad\")\n\n\n\n\n\n\n\n# Verificamos la conectividad de nodos y aristas\ncat(\"Conectividad de nodos (g_high):\", vertex_connectivity(g_high), \"\\n\")\n\nConectividad de nodos (g_high): 4 \n\ncat(\"Conectividad de aristas (g_high):\", edge_connectivity(g_high), \"\\n\")\n\nConectividad de aristas (g_high): 4 \n\ncat(\"¿Es conexo (g_high)?\", is_connected(g_high), \"\\n\")\n\n¿Es conexo (g_high)? TRUE \n\n\nGrafo con alta conectividad.\nEn este caso, la función vertex_connectivity(g_high) y edge_connectivity(g_high) muestran que el grafo tiene alta conectividad de nodos y de aristas, ya que ambos valores serán altos en un grafo completo. La función is_connected(g_high) devolverá TRUE, indicando que el grafo es conexo.\n\n\n\nEn el segundo ejemplo, tenemos un grafo lineal o en forma de cadena. Este grafo tiene baja conectividad de nodos y aristas, ya que la eliminación de un nodo o arista específico puede desconectar la red.\n\n# Grafo lineal de 5 nodos (baja conectividad)\ng_low &lt;- make_graph(edges = c(1, 2, 2, 3, 3, 4, 4, 5), n = 5, directed = FALSE)\nplot(g_low, main = \"Grafo con Baja Conectividad\")\n\n\n\n\n\n\n\n# Verificamos la conectividad de nodos y aristas\ncat(\"Conectividad de nodos (g_low):\", vertex_connectivity(g_low), \"\\n\")\n\nConectividad de nodos (g_low): 1 \n\ncat(\"Conectividad de aristas (g_low):\", edge_connectivity(g_low), \"\\n\")\n\nConectividad de aristas (g_low): 1 \n\ncat(\"¿Es conexo (g_low)?\", is_connected(g_low), \"\\n\")\n\n¿Es conexo (g_low)? TRUE \n\n\nGrafo con baja conectividad.\nEn este grafo lineal, la conectividad de nodos y de aristas es baja. La eliminación del nodo central (nodo 3) o cualquiera de sus aristas adyacentes desconectaría el grafo, dividiéndolo en dos componentes separados. En este caso, la función is_connected(g_low) devolverá TRUE, indicando que el grafo es conexo en su estado actual, pero su conectividad es débil.\nEn redes grandes y complejas, la conectividad es crucial para determinar la robustez de la red frente a la eliminación de nodos o aristas. Un grafo con alta conectividad es menos susceptible a la desconexión, mientras que uno con baja conectividad puede dividirse fácilmente ante la pérdida de algunos elementos."
  },
  {
    "objectID": "analisis_topo.html#tipos-de-modelos-random-de-grafos",
    "href": "analisis_topo.html#tipos-de-modelos-random-de-grafos",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "Tipos de modelos “random” de grafos",
    "text": "Tipos de modelos “random” de grafos\n\nGrafo de isla\nCreamos un grafo simple para ilustrar la funcionalidad básica.\n\n# Crear un grafo de isla\nset.seed(42)\ng &lt;- sample_islands(3, 10, 5/10, 1)\nplot(g, vertex.label=V(g)$name, main=\"Grafo de Isla\")\n\n\n\n\n\n\n\n\nLa función sample_islands genera un grafo que representa un conjunto de islas. En este modelo, cada “isla” es un conjunto de nodos altamente conectados, y hay pocas conexiones entre las islas. Este tipo de red se utiliza a menudo para modelar sistemas donde existen grupos interconectados, pero con poca interacción entre esos grupos.\nCaracterísticas:\nNodos dentro de una isla están densamente conectados. Pocas o ninguna conexión entre islas. Se observa un alto coeficiente de clustering dentro de las islas (More on this later :).\n\n**Que son los argumentos de la funcion? Como afectan las propiedades del grafo producido?\n\n\n\nEjemplos de modelos de grafos aleatorios\n\nModelo de Erdős-Rényi\n\n\n# Grafo Erdős-Rényi\ng_er &lt;- sample_gnp(100, p = 0.05)\nplot(g_er, vertex.size=5, main=\"Grafo Erdős-Rényi\")\n\n\n\n\n\n\n\n\nLa función sample_gnp genera un grafo aleatorio utilizando el modelo de Erdős-Rényi, donde se crea un grafo al agregar aristas de forma aleatoria entre un conjunto de nodos. Cada arista se incluye con una probabilidad p. Este modelo es útil para estudiar propiedades de grafos en general y es una buena representación de redes donde cada conexión es independiente.\nCaracterísticas:\nCada par de nodos tiene una probabilidad p de estar conectado. Puede generar redes densas o dispersas, dependiendo de p. Generalmente, presenta un coeficiente de clustering más bajo en comparación con redes altamente agrupadas (More on this later :).\n\nModelo de Barabási-Albert (scale-free)\n\n\n# Grafo Barabási-Albert\ng_ba &lt;- sample_pa(100)\nplot(g_ba, vertex.size=5, main=\"Grafo Barabási-Albert\")\n\n\n\n\n\n\n\n\nLa función sample_pa genera un grafo siguiendo el modelo de Barabási-Albert, que es un modelo de red de escala libre. Este modelo simula el crecimiento de redes donde nuevos nodos se conectan a nodos existentes con una probabilidad proporcional a su grado, lo que significa que los nodos más conectados tienen más probabilidades de recibir nuevas conexiones.\nCaracterísticas:\nGenera redes de escala libre con una distribución de grado que sigue una ley de potencia (more later). Presenta nodos hubs (nodos con un grado alto). Centralidad de grado generalmente alta en nodos muy conectados (more on this later)."
  },
  {
    "objectID": "analisis_topo.html#personalización-de-redes-en-igraph",
    "href": "analisis_topo.html#personalización-de-redes-en-igraph",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "Personalización de redes en igraph",
    "text": "Personalización de redes en igraph\nAun mas ejemplos de personalización de redes, combinando factores, en un solo bloque de código con comentarios explicativos.\n\n# Personalización de redes en igraph\n\n# Grafo de ejemplo\ng &lt;- sample_gnp(20, p = 0.1)\n\n# Personalizar atributos de nodos\nV(g)$color &lt;- ifelse(degree(g) &gt; 2, \"red\", \"blue\")  # Color por grado\nV(g)$size &lt;- degree(g) * 3  # Tamaño de nodo proporcional al grado\nV(g)$label &lt;- paste0(\"Node:\", V(g))  # Etiquetas de nodos\n\n# Personalizar atributos de aristas\nE(g)$color &lt;- \"gray\"  # Color de aristas\nE(g)$width &lt;- 2  # Ancho de aristas\n\n# Graficar el grafo personalizado\nplot(g, vertex.label=V(g)$label, edge.arrow.size=0.5, \n     main=\"Grafo Personalizado: Atributos de Nodos y Aristas\")"
  },
  {
    "objectID": "analisis_topo.html#coeficiente-de-clustering-local",
    "href": "analisis_topo.html#coeficiente-de-clustering-local",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "Coeficiente de Clustering local",
    "text": "Coeficiente de Clustering local\nEl coeficiente de clustering es una medida que indica la tendencia de los nodos en una red a agruparse en clústeres. Un alto coeficiente de clustering para un nodo (local) sugiere que un nodo es parte de una comunidad densa. En biología, esto puede ser relevante para estudiar interacciones entre proteínas, donde un alto coeficiente de clustering entre varios genes puede indicar una comunidad de proteínas que interactúan fuertemente entre sí.\nSe puede definir como:\n\\[\nC(v) = \\frac{2 \\times \\text{number of triangles through } v}{\\text{degree}(v) \\times (\\text{degree}(v) - 1)}\n\\]\nO quizas mas intuitivemente, puede definirse en términos de la proporción de triángulos presentes en el grafo en comparación con el número total de triángulos posibles que pueden formarse a partir de los vecinos de un nodo. Esta definición se centra en la noción de “triángulos” y se expresa como:\n\\[\nC(v) = \\frac{\\text{Número de triángulos en los vecinos de } v}{\\text{Número total de triángulos posibles entre los vecinos de } v}\n\\]\n\nInterpretación\n\nUn coeficiente de clustering cercano a 1 indica que los vecinos de un nodo están muy interconectados, formando un clúster denso.\nUn coeficiente de clustering cercano a 0 indica que los vecinos de un nodo están poco interconectados.\n\nEsta definición es útil para visualizar cómo las interacciones locales entre los nodos contribuyen a la estructura global de la red, y es especialmente relevante en el contexto de redes sociales y biológicas, donde se pueden observar grupos de interacciones fuertes entre ciertos nodos.\n\n\nCódigo para Calcular y Visualizar el Coeficiente de Clustering local\n\n# Crear una red aleatoria\nset.seed(42)\ng_clustering &lt;- sample_gnp(n = 15, p = 0.15, directed = FALSE)\n\n# Calcular el coeficiente de clustering por nodo\nvertex_clustering &lt;- transitivity(g_clustering, type = \"local\")\nV(g_clustering)$color &lt;- ifelse(vertex_clustering &gt; 0, \"red\", \"lightblue\")\n\n# Visualizar la red con coeficiente de clustering - si los vecinos estan conectadas, se visualiza en rojo!\nset.seed(321)\nplot(g_clustering, vertex.size = 5, vertex.label = NA, main = \"Coeficiente de Clustering Local\")\n\n\n\n\n\n\n\n\nEste código calcula e imprime los coeficientes local de un pequeño grafo aleatorio y visualiza los nodos según el coeficiente de clustering &gt; 1, donde los nodos rojos tienen un coeficiente &gt; 1 (por lo menos un par de interactores interaccionan entre ellos - en otras palabras - FORMAN UN TRIANGULO) y los nodos azules tienen un coeficiente bajo."
  },
  {
    "objectID": "analisis_topo.html#coeficiente-de-clustering-global",
    "href": "analisis_topo.html#coeficiente-de-clustering-global",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "Coeficiente de Clustering Global",
    "text": "Coeficiente de Clustering Global\n\nDefinición: El coeficiente de clustering global es una medida global que describe la tendencia general de la red de formar triángulos (conexiones entre tres nodos). Proporciona una visión general de la densidad de la red en términos de interacciones entre vecinos de los nodos.\nCálculo:\n\nUna forma común de calcular el coeficiente de clustering global es tomando el promedio de los coeficientes de clustering locales de todos los nodos en la red:\n\n\n\\[\n  C_{\\text{global}} = \\frac{1}{N} \\sum_{v \\in G} C(v)\n\\]\nDonde (N) es el número de nodos en el grafo y (C(v)) es el coeficiente de clustering local del nodo (v).\n\nAlternativamente, se puede definir como la relación entre el número de triángulos (tripletas de nodos completamente conectados) y el número de tripletas conectadas (un triplete es cualquier conjunto de 3 nodos conectados por 2 aristas):\n\n\\[ C\\_{\\text{global}} = \\frac{3 \\times \\text{Número de triángulos}}{\\text{Número de tripletas conectadas}} \\]\n\nInterpretación: Un coeficiente de clustering global cercano a 1 significa que la red está altamente agrupada (muchos nodos tienen coeficientes de clustering altos), mientras que un valor cercano a 0 sugiere que la red es más aleatoria, con menos agrupamientos locales.\n\n\nlibrary(igraph)\nset.seed(333)\n# High Global Clustering Coefficient - Small-World Network\ng_high_clustering &lt;- sample_smallworld(dim = 1, size = 30, nei = 3, p = 0.05)\nglobal_clustering_high &lt;- transitivity(g_high_clustering, type = \"global\")\ncat(\"Global Clustering Coefficient (High):\", global_clustering_high, \"\\n\")\n\nGlobal Clustering Coefficient (High): 0.4379085 \n\n# Low Global Clustering Coefficient - Random Network\ng_low_clustering &lt;- sample_gnp(30, p = 0.05, directed = FALSE)\nglobal_clustering_low &lt;- transitivity(g_low_clustering, type = \"global\")\ncat(\"Global Clustering Coefficient (Low):\", global_clustering_low, \"\\n\")\n\nGlobal Clustering Coefficient (Low): 0.1 \n\n# Plotting both networks\npar(mfrow = c(1, 2))\nplot(g_high_clustering, main = paste(\"High Clustering (Coeff:\", round(global_clustering_high, 2), \")\"),\n     vertex.size = 8, vertex.label = NA, edge.color = \"dodgerblue\")\nplot(g_low_clustering, main = paste(\"Low Clustering (Coeff:\", round(global_clustering_low, 2), \")\"),\n     vertex.size = 8, vertex.label = NA, edge.color = \"tomato\")\n\n\n\n\n\n\n\npar(mfrow = c(1, 1))\n\n\nEjemplo en biología\nEn las redes de interacción de proteínas, los genes que codifican proteínas que interactúan entre sí tienden a formar grupos o módulos con un alto coeficiente de clustering. Esto es relevante para identificar vías metabólicas o complejos proteicos."
  },
  {
    "objectID": "analisis_topo.html#centralidad",
    "href": "analisis_topo.html#centralidad",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "Centralidad",
    "text": "Centralidad\nLa centralidad se refiere a la importancia de un nodo dentro de una red. Existen varios tipos de centralidad, entre ellos:\n\nCentralidad de grado (degree centrality): Número de conexiones directas de un nodo.\n\n\\[\nC_g(v) = \\text{degree}(v)\n\\]\n\nCentralidad de Intermediación (Betweenness Centrality):\nLa centralidad de intermediación es una medida clave en la teoría de redes que indica cuántas veces un nodo actúa como “puente” o intermediario entre otros nodos. Es un concepto crucial para entender la estructura de la red en términos de control o flujo de información, recursos, o influencia a través de los nodos de la red.\n\nDefinición Matemática:\nLa centralidad de intermediación de un nodo \\(v\\) en una red se define como:\n\\[\nC_b(v) = \\sum_{s \\neq v \\neq t} \\frac{\\sigma_{st}(v)}{\\sigma_{st}}\n\\]\n\n\\(\\sigma_{st}\\) es el número total de caminos más cortos entre los nodos \\(s\\) y \\(t\\).\n\\(\\sigma_{st}(v\\) es el número de esos caminos más cortos que pasan por el nodo \\(v\\).\n\nLa centralidad de intermediación calcula, para un nodo dado, la fracción de caminos más cortos entre todos los pares de nodos \\(s\\) y \\(t\\) en la red que pasan a través de él. Cuanto mayor sea este valor, más “importante” es ese nodo en la red en términos de conectar diferentes partes de la misma.\n\n\n\nExplicación Conceptual:\nLa centralidad de intermediación mide el papel de un nodo como intermediario entre otros nodos de la red. Un nodo con una centralidad de intermediación alta es uno que está en el medio de muchos caminos más cortos entre otros nodos. Esencialmente, estos nodos tienen un poder significativo en términos de control del flujo de información o recursos a través de la red.\n\n\nRelevancia en Biología:\nEn el contexto biológico, la centralidad de intermediación tiene aplicaciones en varias áreas, como las redes de interacción proteína-proteína (PPI), las redes metabólicas, y las redes de regulación génica. Identificar los nodos con alta centralidad de intermediación puede ayudar a entender los puntos de control clave o los “puentes” que facilitan la comunicación entre diferentes partes de una red biológica.\n\nEjemplos en Biología:\n\nRedes de Interacción Proteína-Proteína (PPI):\n\nEn una red de interacción proteína-proteína, las proteínas con alta centralidad de intermediación pueden ser aquellas que conectan diferentes “modulos” funcionales dentro de la red. Estas proteínas actúan como puntos de control para la transmisión de señales entre distintas funciones celulares. Si una proteína con alta centralidad de intermediación se ve afectada por mutaciones, podría tener un impacto significativo en varias vías biológicas o incluso en la enfermedad.\nEjemplo: En una red PPI de una célula humana, una proteína como TP53 (p53), que tiene un papel central en la regulación del ciclo celular y la respuesta al daño del ADN, podría tener una alta centralidad de intermediación. Si p53 se ve alterada o desregulada, puede afectar numerosas vías celulares relacionadas con el cáncer, como la apoptosis, la reparación del ADN y la regulación del ciclo celular.\n\nRedes Metabólicas:\n\nEn una red metabólica, un metabolito o enzima con alta centralidad de intermediación puede ser clave para conectar diversas rutas metabólicas. Estos metabolitos actúan como puentes entre diferentes procesos metabólicos, lo que permite una integración eficiente de los recursos celulares.\nEjemplo: El ATP (adenosín trifosfato), que es esencial para casi todas las reacciones bioquímicas celulares, puede actuar como un nodo con alta centralidad de intermediación en una red metabólica. La alteración de la producción o el uso de ATP afecta una multitud de rutas metabólicas y es crucial para la función celular.\n\nRedes de Regulación Génica:\n\nEn las redes de regulación génica, los factores de transcripción que conectan diferentes conjuntos de genes pueden tener una alta centralidad de intermediación. Estos factores de transcripción no solo regulan la expresión de un conjunto de genes, sino que también actúan como intermediarios para la integración de diversas señales celulares.\nEjemplo: El factor de transcripción NF-kB es un nodo con alta centralidad de intermediación en las redes de regulación génica. Controla la expresión de genes implicados en la respuesta inmune y en procesos inflamatorios. Si NF-kB está desregulado, puede contribuir a enfermedades como el cáncer, enfermedades autoinmunes y trastornos inflamatorios.\n\n\n\n\nCódigo R para Calcular y Visualizar la Centralidad de Intermediación:\n\nset.seed(123)\ng &lt;- sample_gnp(10, p = 0.5)\n\n# Calculate betweenness centrality for all nodes\nbetweenness_centrality &lt;- betweenness(g)\n\n# Normalize the betweenness values for better visualization (optional)\nbetweenness_normalized &lt;- (betweenness_centrality - min(betweenness_centrality)) / \n    (max(betweenness_centrality) - min(betweenness_centrality))\n\n# Visualize the graph with nodes colored by betweenness centrality\nplot(g, \n     vertex.size = 20, \n     vertex.color = heat.colors(100, rev=TRUE)[round(betweenness_normalized * 99) + 1], # Color nodes based on centrality # Optionally remove labels\n     main = \"Graph colored by Betweenness Centrality\")"
  },
  {
    "objectID": "analisis_topo.html#propiedades-de-las-redes-de-escala-libre",
    "href": "analisis_topo.html#propiedades-de-las-redes-de-escala-libre",
    "title": "Análisis de grafos y topología de redes (I): Topología; Coef clustering; Centralidad. Introducción al uso de igraph y otros paquetes para crear y analizar redes",
    "section": "Propiedades de las Redes de Escala Libre:",
    "text": "Propiedades de las Redes de Escala Libre:\n\n1. Distribución de Grado:\nLa distribución de grado en las redes de escala libre sigue una ley de potencia, lo que significa que el número de nodos con un cierto grado ( k ) (número de conexiones) disminuye rápidamente a medida que ( k ) aumenta. Matemáticamente, esto se expresa como:\n\\[\nP(k) \\sim k^{-\\gamma}\n\\]\nDonde:\n\n\\(P(k)\\) es la probabilidad de que un nodo tenga un grado \\(k\\).\n\\(k\\) es el grado de un nodo (el número de conexiones que tiene).\n\\(\\gamma\\) es el exponente de la ley de potencia, que típicamente se encuentra entre 2 y 3 en la mayoría de redes de escala libre.\n\nEste tipo de distribución es característica de redes autoorganizadas o generadas por crecimiento preferencial, donde nuevos nodos tienden a conectarse preferentemente a los nodos que ya están muy conectados. Esta propiedad genera hubs o nodos centrales, que son cruciales para la conectividad de la red.\n\nEjemplo en Biología: Redes de Interacción Proteína-Proteína (PPI)\nEn redes de interacción proteína-proteína (PPI), las proteínas más fundamentales para las funciones celulares tienden a tener un alto grado de conectividad, es decir, son hubs. Estas proteínas suelen ser las que orquestan múltiples procesos celulares, como la transcripción genética, la reparación del ADN y la señalización celular.\n\nEjemplo: BRCA1 (Breast Cancer 1) es una proteína clave en la reparación del ADN y en la regulación del ciclo celular. En las redes de interacción proteína-proteína (PPI), BRCA1 actúa como un hub, conectando muchas otras proteínas involucradas en procesos esenciales como la reparación del ADN, el control del ciclo celular, y la respuesta al daño genético. Debido a su papel central en estas vías, BRCA1 es crucial para la estabilidad genética de la célula.\n\nLa alteración o mutación de BRCA1 está asociada con un mayor riesgo de desarrollar cáncer de mama y ovario. Las mutaciones en BRCA1 afectan su capacidad para interactuar con otras proteínas de la red, lo que compromete la reparación del ADN y aumenta la probabilidad de que ocurran mutaciones genéticas que conduzcan al cáncer. En este caso, BRCA1 no solo es un hub en una red de interacciones, sino que también es un punto crítico para mantener la integridad genética celular.\n\n\n\n2. Centralidad y Robustez:\nUna de las características interesantes de las redes de escala libre es que, debido a la existencia de hubs, estas redes son robustas frente a fallos aleatorios. Esto significa que si se eliminan nodos de la red de manera aleatoria, la conectividad global de la red no se verá gravemente afectada, ya que los nodos de baja conectividad no son esenciales para la red. Sin embargo, si se atacan los hubs (nodos altamente conectados), la red puede volverse muy vulnerable, ya que la eliminación de estos nodos puede desconectar grandes partes de la red.\n\nEjemplo en Biología: Redes Neuronales\nEn las redes neuronales, los hubs son neuronas clave que conectan diferentes regiones del cerebro. La red de conectividad cerebral sigue una estructura de escala libre, donde ciertas neuronas tienen muchas conexiones con otras, permitiendo una comunicación eficiente entre regiones cerebrales distantes. Estas neuronas de alto grado son críticas para el procesamiento de información en el cerebro.\n\nEjemplo: El córtex prefrontal tiene neuronas de alta centralidad en las redes neuronales, que facilitan la integración de información de diferentes áreas cerebrales. Si se dañan estas neuronas (por ejemplo, en enfermedades neurodegenerativas), pueden ocurrir disfunciones cognitivas importantes.\n\n\n\n\n3. Vulnerabilidad a Ataques Dirigidos:\nDebido a su estructura jerárquica, las redes de escala libre son vulnerables a ataques dirigidos a los hubs. Al eliminar estos nodos clave, la conectividad de la red puede colapsar rápidamente, lo que afecta su funcionamiento global.\n\nEjemplo en biología: En las redes de interacción proteína-proteína, eliminar las proteínas clave (hubs) podría interrumpir varias vías biológicas simultáneamente, lo que llevaría a enfermedades o disfunciones celulares.\n\nTambien puede ser aprovechado - por ejemplo en el diseño de antibioticos, puede que buscan dianas que son hubs: atacar una proteina hub para afectar al maximo posible el funcionamiento de la bacteria\n\nEjemplo de Análisis de Redes de Escala Libre\nEn R, podemos generar y analizar una red de escala libre utilizando el modelo de Barabási-Albert (BA), que es un modelo clásico para generar redes de escala libre. A continuación se muestra un código en R que genera una red de escala libre y visualiza la distribución de grados:\n\n# Crear una red de escala libre usando el modelo de Barabási-Albert\ng_sf &lt;- sample_pa(1000)\n\n# Obtener la distribución de grado\ndegree_distribution &lt;- degree(g_sf)\n\n# Visualizar la distribución de grado\nhist(degree_distribution, breaks=50, main=\"Distribución de Grado de una Red de Escala Libre\", \n     xlab=\"Grado\", ylab=\"Frecuencia\")"
  }
]